/* 
 * File:   main.cpp
 * Author: swetha
 *
 * Created on 11 July, 2013, 2:33 PM
 */

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <wchar.h>
#include <net/if.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/file.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <sched.h>
#include <curl/curl.h>
#include <curl/easy.h>
#include <list>
#include <signal.h>
#include <libAlmond.h>
#include <libAlmondHA.h>
#include "main.h"
#include <unicode.h>
#include <Logger.h>
#include <libAlmondHA_Private.h>
#include "almond_timer.h"
#include "almondList.h"
#include <math.h>
#include <bits/stdc++.h>
using namespace std;

#define RGB(r,g,b)              (((r&0xF8)<<8)|((g&0xFC)<<3)|((b&0xF8)>>3)) //5 red | 6 green | 5 blue
#define APP_EX "hadata"
#define APP_ID "4c09"

void theCallback(Device* notifiedDevice);
void theEventCallback(Event *e);
void btnCaptureOnTouch(void);
void ImageCountOnTouch(void);
void ResolutionOnTouch(void);
void btndeativeOnTouch(void);
extern int roundfun(float num);
//static DeviceList * getDeviceList(void);
void getdevicelist(void);
void Value(void);


Memory mem;
Languages lan;
Logger *logger;
DeviceList dL;
Device * notifiedDevice;
Event *e;
Screen *connected_home;
WidgetType type;
DevType contDev = UnknownDeviceType;
list<Device>::iterator it;

siteInfo *IREventData, *deviceLocation;
almondList *Irlst;

lcdImage readLCDArea, /*readLCDArea2,*/ screenData;
ImagePNG sensorImg, pngImg;
Widget *NameBox, *LocationBox, *DoneButton, *Dummy, *TimeBox, *WDTime;
Keyboard *kb1,  *kb3, *kb5 = NULL, *kb4 = NULL, *kb6 = NULL, *kb7 = NULL, *kb9; //kb3 newal2

double SetpointTmp, LedSatur = 0.0;
float RMSCurrent, ActivePower, RMSVoltage ,thermoCurrent = -1.0;

unsigned int presentColor = 0;
short int userind = 0;
short int ImageLoaded[20];
unsigned short int failed_deviceId = 0, Ledhue = 0;

int sensorsCount = 17, xCount = 2, yCount = 3, pageNum, curPage = 0;
int Acflag = 0, CheckAcFan = 0, tempvaluesize = 0, AcIrFlag = 0, CheckIrMode = 0;
int arrow_plus, pen_1, arrow_minus, trash_png, trashopen_png, color_shades;
int moreIcon, startAt,  deviceToControl = -1, crossonTouch,img1,img2,img3,img4; //newgeneric
int crossdefault, critical, battery_c, alarm_default, alarm_onTouch, alarm_off_default, alarm_off_onTouch, luminanceImage;
int Tick, color_temp, in_home, away_home, battery_icon, color_png, fanImage, humidityImage, color_temp1, color_png1;
int change, basicVal, filed, valueToSave = -1, backButtonImg, backButtonPressImg;

int contDevID = -1, AcIrFanMode = 0, preMode;
int irApplianceSelected, irAppButtonSelected, irAppLedSelected, irAppButton;
int device_key = -1, soundtype = -1, StartIndxCnt = 0;
int thermoCool = -1, thermoHeat = -1, thermotarget = -1;
int old_version, new_version, updates_available = 0,u_val, s_devid = -1, per = 0;
int dimmerCurrLevel, thermoCoolCurrLevel = 0, thermoHeatCurrLevel = 0, percentage;

int xCoords[3] = {X_COORD_START, X_COORD_START + 150, X_COORD_START + 300};
int yCoords[4] = {Y_COORD_START, Y_COORD_START + 60, Y_COORD_START + 120, Y_COORD_START + 180};
int devIdList[250], MODE = LIST_MODE, format = FORMAT_F;


bool ConValFlag = false, MultiSoundFlag = false; //ConFlag = false,, ConMode = false;
bool ParameterFlag = false, ValueSizeFlag = false, ValueFlag = false; //IRCodeFlag = false,
bool kbMode = false, En_Key = false, enableTouch = false;
bool ConMode = false, IRCodeFlag = false, ConFlag = false;
bool StartLED = true, StartBlinkLED = false, StartSiren = false ;
bool ota_upgrade_flag = false, updatetouchflag = false, current_update = false;

unsigned char Userno;
unsigned char appled[7];
char pin[10];
char nVer[512], output[180], t_temp[500];
char ConfigParam[10] = "", ConfigValue[10] = "", ConfigSet[10] = "";
char thermoMode[20], thermoFan[20], thermoState[20], thermoFanState[20], thermoaway[10], thermounit[10], tmpc[10] = "";
char *xpin, almond_mode[180], DevName[180], DevLocation[180], Userpin[20] = "", Time[10] = "";

wchar_t valunt[10], ConfigParam_opt[180]; //TMP_opt[180],
wchar_t opt[180], N_opt[180], As_opt[180];

int8u in = 1;
genericDevice gen;
unsigned char grid1[3], grid2[3], grid3[3];
bool more = false, tamper = false, indexState = false, multiswitch = false;


Widget GarageDoorOpenButton(type.Button, 80, 130, 80, 40, 0, lan.get("open", "connected_sensor")), GarageDoorCloseButton(type.Button, 170, 130, 80, 40, 0, L"close"); //newal2
Widget EconModeButton(type.Button, 80, 190, 60, 30, 0, L"Econ"), HeatModeButton(type.Button, 150, 190, 60, 30, 0, lan.get("heat", "connected_sensor")); //heatit
Widget ConfigurationButton(type.Button, 120, 95, 85, 30, 0, L"Configuration"), ConfigurationButton1(type.Button, 110, 190, 90, 30, 0, L"Configuration");
Widget IRCodeSetButton(type.Button, 200, 100, 50, 40, 0, lan.get("set", "common")), SetConfigurationButton(type.Button, 246, 150, 50, 30, 0, lan.get("set", "common"));
Widget ValueSizeSetTextModifyPlus(type.Button, 80, 150, 20, 30, 0, L"+"), ValueSizeSetTextModifyMinus(type.Button, 146, 150, 20, 30, 0, L"-");
Widget DoorLockButtonWithUserCode(type.Button, 50, 190, 70, 30, 0, lan.get("lock", "common")), DoorUnlockButtonWithUserCode(type.Button, 135, 190, 70, 30, 0, lan.get("unlock", "common"));

Widget DoorLockButton(type.Button, 85, 130, 70, 30, 0, lan.get("lock", "common")), DoorUnlockButton(type.Button, 165, 130, 70, 30, 0, lan.get("unlock", "common"));
Widget SwitchOnButton(type.Button, 85, 150, 70, 30, 0, lan.get("on_1", "common")), SwitchOffButton(type.Button, 165, 150, 70, 30, 0, lan.get("off_1", "common"));
Widget ACSwitchOnButton(type.Button, 85, 130, 70, 30, 0, lan.get("on_1", "common")), ACSwitchOffButton(type.Button, 165, 130, 70, 30, 0, lan.get("off_1", "common"));
Widget EditButton(type.Button, 220, 190, 80, 30, 0, lan.get("edit", "common")), TamperButton(type.Button, 15, 190, 80, 30, 0, lan.get("tampered", "connected_sensor"));
Widget PanicButton(type.Button, 15, 190, 80, 30, 0, lan.get("panic", "connected_sensor")), EmerButton(type.Button, 100, 190, 80, 30, 0, lan.get("emergency", "connected_sensor"));
Widget YesButton(type.Button, 85, 140, 70, 30, 0, lan.get("yes", "common")), NoButton(type.Button, 165, 140, 70, 30, 0, lan.get("no", "common"));

Widget multilevelOnButton(type.Button, 85, 152, 70, 30, 0, lan.get("on_1", "common")), multilevelOffButton(type.Button, 165, 152, 70, 30, 0, lan.get("off_1", "common"));
Widget colorOnButton(type.Button, 100, RECT_Y + RECT_HEIGHT + 45, 55, 30, 0, lan.get("on_1", "common")), colorOffButton(type.Button, 160, RECT_Y + RECT_HEIGHT + 45, 55, 30, 0, lan.get("off_1", "common"));
Widget settingsButton(type.Button, 20, RECT_Y + RECT_HEIGHT + 45, 75, 30, 0, L"Settings");
Widget checkforupgradeButton(type.Button, 100, 170, 130, 30, 0, L"Check For Updates"), upgradeButton(type.Button, 100, 170, 130, 30, 0, L"Upgrade Firmware");
Widget basicSetTextModifyPlus(type.Button, 85, 170, 18, 30, 0, lan.get("plus", "common")), basicSetTextModifyMinus(type.Button, 137, 170, 20, 30, 0, lan.get("minus", "common"));
//Widget ScenesButton(type.Button, 20,50,80, 30, 0, L"Scenes");/////////editing
Widget EmergencySoundButton(type.Button, 20, 95, 80, 45, 0, lan.get("emergency", "connected_sensor")), FireSoundButton(type.Button, 110, 95, 80, 45, 0, lan.get("fire", "connected_sensor"));
Widget AmbulanceSoundButton(type.Button, 200, 95, 80, 45, 0, lan.get("ambulance", "connected_sensor")), PoliceSoundButton(type.Button, 20, 155, 80, 45, 0, lan.get("police", "connected_sensor"));
Widget DoorSoundButton(type.Button, 110, 155, 80, 45, 0, lan.get("door_chime", "connected_sensor")), BeepSoundButton(type.Button, 200, 155, 80, 45, 0, lan.get("beep", "connected_sensor"));
Widget MultiSwitchOnButton(type.Button, 90, 100, 70, 30, 0, lan.get("on_1", "common")), MultiSwitchOffButton(type.Button, 180, 100, 70, 30, 0, lan.get("off_1", "common"));
Widget MultiSwitchOnButton1(type.Button, 90, 150, 70, 30, 0, lan.get("on_1", "common")), MultiSwitchOffButton1(type.Button, 180, 150, 70, 30, 0, lan.get("off_1", "common"));

Widget ApplianceOne(type.Button, 25, 95, 85, 30, 0, L""), ApplianceTwo(type.Button, 120, 95, 85, 30, 0, L""), ApplianceThree(type.Button, 215, 95, 85, 30, 0, L"");
Widget ApplianceFour(type.Button, 25, 135, 85, 30, 0, L""), ApplianceFive(type.Button, 120, 135, 85, 30, 0, L""), ApplianceSix(type.Button, 215, 135, 85, 30, 0, L"");
Widget AppButtonOne(type.Button, 25, 95, 60, 30, 0, L""), AppButtonTwo(type.Button, 95, 95, 60, 30, 0, L""), AppButtonThree(type.Button, 165, 95, 60, 30, 0, L""), AppButtonFour(type.Button, 235, 95, 60, 30, 0, L"");
Widget AppButtonFive(type.Button, 25, 135, 60, 30, 0, L""), AppButtonSix(type.Button, 95, 135, 60, 30, 0, L""), AppButtonSeven(type.Button, 165, 135, 60, 30, 0, L""), AppButtonEight(type.Button, 235, 135, 60, 30, 0, L"");
Widget SelectIRLed(type.Button, 205, 190, 90, 30, 0, L"Select LED"), ChangeButtonName(type.Button, 25, 190, 100, 30, 0, L"Change Button");

Widget LedBrightness(type.Button, 20, 145, 90, 30, 0, L"Brightness"),selectIRLedDone(type.Button, 220, 190, 80, 30, 0, L"Done");
Widget ChangeApplianceName(type.Button, 25, 190, 85, 30, 0, L"Edit Name"), MoreButton(type.Button, 120, 190, 80, 30, 0, L"More");

Widget SelectSoundButton(type.ColoredButton, 50, 120, 100, 50, 0, RGB(0, 205, 20), 1, 20.0f, 65535, L""); 
Widget StopMSSirenButton(type.ColoredButton, 170, 120, 100, 50, 0, RGB(204, 0, 0), 1, 30.0f, 65535, L"stop"); 
Widget RemovedeviceButton(type.ColoredButton, 15, 190, 80, 30, 0, RGB(150, 0, 0), 1, 18.0f, 65535, lan.get("remove", "common"));
Widget AdvanceButton(type.ColoredButton, 15, 190, 70, 30, 0, RGB(204, 0, 0), 1, 15.0f, 65535, L"Advanced");

Widget TempBox(type.TextBox, 100, 140, 78, 25, 0, L""), IRCodeSetText(type.TextBox, 135, 100, 50, 40, 0, L"");
Widget ParameterSetText(type.TextBox, 10, 150, 60, 30, 0, L""), ValueSetText(type.TextBox, 176, 150, 60, 30, 0, L"");
Widget AlmondTimer(type.TextBox, 180, 185, 55, 30, 0, L"âˆž"), AlmondLedTimer(type.TextBox, 175, 190, 55, 30, 0, L"âˆž");
Widget ValueSizeSetText(type.TextBox, 103, 150, 40, 30, 0, L"");

Widget
basicGetButton(type.Button, 85, 115, 70, 30, 0, lan.get("get", "common")), basicGetTextBox(type.TextBox, 165, 115, 70, 30, 0, L""),
basicSetButton(type.Button, 165, 155, 70, 30, 0, lan.get("set", "common")), basicSetText(type.TextBox, 105, 155, 30, 30, 0, L"");

Widget RetainButton(type.RadioButton, 100, 130, 80, 40, 0, L"");
Widget SirenButton(type.RadioButton, 20, 95, 40, 25, 0, L""), AlarmButton(type.RadioButton, 105, 95, 40, 25, 0, L""), DoorBellButton(type.RadioButton, 200, 95, 40, 25, 0, L"");
Widget LowVolume(type.RadioButton, 20, 140, 25, 25, 0, L""), MedVolume(type.RadioButton, 105, 140, 25, 25, 0, L""), HighVolume(type.RadioButton, 200, 140, 25, 25, 0, L"");

Widget *IRLed1, *IRLed2, *IRLed3, *IRLed4, *IRLed5, *IRLed6; 


Widget btnCapture(type.Button, 155, 95, 55, 30, 0, L"Capture"), btnImageCount(type.Button, 155, 135, 55, 30, 0, L""), btnResolution(type.Button, 155, 175, 55, 30, 0, L"");
Widget btnDeActive(type.Button, 25, 190, 80, 30, 0, L"Deactivate");
void doNothing(void) {

    return;
}

Device* getDevice(int devid) {
    list <Device>::iterator iterator;
  char buffer[123556];
    for (iterator = dL.devices.begin(); iterator != dL.devices.end(); ++iterator) {
        if ((*iterator).getID() == devid) {
           
            break;//swprintf(opt,100,L"%s",text);

        }
    }
    if (iterator == dL.devices.end())
        return NULL;
    else
        return &(*iterator);
}

void getBatteryVal(void) {

    try {
        Device d(contDevID);
        d.getBatteryStatus();
    } catch (int exeption) {
        return;
    }
    sprintf(t_temp, " get battery level for device %d ", contDevID);
    LOG(Logger::INFO, t_temp);
}

/*void doRefresh(void) {
    bool Local = true;
    while (Local) {
        try {
            dL.Populate();
            Local = false;
        } catch (int ex) {
            LOG(Logger::WARN, "Connected home Got Exception");
            if (ex != 0 && ex != -1) {
                RemoveDevice(ex);
            }
        }
    }
    int cnt = 0;
    for (list <Device>::iterator iterator = dL.devices.begin(); (iterator != dL.devices.end()) && (cnt < 250); ++iterator) {
        devIdList[cnt++] = (*iterator).getID();
    }
    sensorsCount = dL.devices.size();
}*/
bool a = false;

int main(int argc, char** argv) {
    
    logger = Logger::getInstance();
    char logfile[100] = "/tmp/connected_home.log";
    logger->setFileName(logfile);
    logger->setMethod(Logger::ALL, Logger::LOGFILE);
    LOG(Logger::INFO, "<===============================Connected_home started ==============================>");
    for(int i=0;i<argc;i++)
     printf("%s\n",argv[i]);
     
     init();
    //connectedHome_init();
    //connectedHome_draw();

    
    HADevices::initializeFree2();

    dL.Populate();
 list <Device> devices;
 list <Device>::iterator iterator;
 

    for (iterator = dL.devices.begin(); iterator != dL.devices.end(); ++iterator) {
       
           printf("%s",*iterator);
        
      //ans.push_back(*iterator);
   
     }
    HADevices::genericCallback(&theCallback);
    HADevices::eventCallback(&theEventCallback); 
   
  
    setTouchHandler(tH);
    libTouchInit();
    
    //getdevicelist();
    
    Value();
    a = true;
    while (1) {
  pause;
        
    }
    
    return 0;
}

/*void showlist(list <Device> dL.device) 
{ 
    list <Device> :: iterator it; 
    for(it = dL.device.begin(); it != dL.device.end(); ++it) 
        std::cout << '\t' << *it; 
    std::cout << '\n'; 
}*/
   /*void  getdevicelist(void)
{  list <Device>::iterator iterator;
 for (iterator = dL.devices.begin(); iterator != dL.devices.end(); ++iterator) 
        (*iterator).getDeviceList();

} */
void Value(void)
{
   loop:
   int DevID,IdxID;
   char IdxVal[5];
   printf("Enter the device ID\n");
   scanf("%d",&DevID);
   printf("Enter the index ID\n");
   scanf("%d",&IdxID);
   printf("Enter the index Value\n");
   scanf("%s",IdxVal);
   getDevice(DevID);
   Device d(DevID);
   d.setValue(IdxID,IdxVal);
   goto loop;
}



    void init(void) {
    int timerD = 0;
    AlmondTimerInfo info;
    wcscpy(opt, lan.get("connected_sensor_title", "connected_sensor"));
    connected_home = new Screen(opt);   
    memset(opt, 0, sizeof opt);
    connected_home->backHandler = &backOnTouch;
    connected_home->onExit = &onExit;
    connected_home->keyboard.keyboardReturn = &draw;

    NameBox = new Widget(type.TextBox, 100, 100, 170, 30, 0, L"");
    NameBox->onTouch = &NameOnTouch;

    DoneButton = new Widget(type.Button, 220, 190, 80, 30, 0, lan.get("done", "common"));
    DoneButton->onTouch = &DoneButtonOnTouch;

    LocationBox = new Widget(type.TextBox, 100, 135, 170, 30, 0, L"");
    LocationBox->onTouch = &LocationBoxOnTouch;
    Dummy = new Widget(type.Container, 100, 100, 1, 1, 0, L"");

    WDTime = new Widget(type.TextBox, 135, 140, 50, 25, 0, L"");
    WDTime->onTouch = &TimeBoxOnTouch;
    
    kb1 = new Keyboard();
    kb3 = new Keyboard();
    kb4 = new Keyboard();
    kb5 = new Keyboard(); //newgeneric
    kb6 = new Keyboard(); //newal2
    kb7 = new Keyboard(); //newal2
    kb9 = new Keyboard();
    
    kb1->keyboardReturn = &kbReturn;
    kb3->keyboardReturn = &NumericKbReturn;
    kb4->keyboardReturn = &NumericKbReturn;
    kb5->keyboardReturn = &IRCodeNumericKbReturn; //newgeneric
    kb6->keyboardReturn = &TempNumericKbReturn; //newal2
    kb7->keyboardReturn = &ConfigParamNumericKbReturn; //newal2
    kb9->keyboardReturn = &IRAppNameKbReturn;

    pageNum = sensorsCount / (xCount * yCount);
    bool Local = true;
    while (Local) {
        try {
            dL.Populate();
            Local = false;
        } catch (int ex) {
            fprintf(stderr, "Connected_home:got exception:%d\n", ex);
            LOG(Logger::WARN, "Connected home Got Exception");
            if (ex != 0 && ex != -1) {
                RemoveDevice(ex);
            }
        }
    }
    list <Device>::iterator it;
    int d_devid;
    int cnt = 0;
//        if ((*it).getDeviceType() == 5) {
//            Door_Lock Dl;
//            Dl.Device_id = (*it).getID();
//            Dl.state = false;
//            Door_Lock_info.push_back(Dl);
//        }
    for (list <Device>::iterator iterator = dL.devices.begin(); (iterator != dL.devices.end()) && (cnt < 250); ++iterator) {
        devIdList[cnt++] = (*iterator).getID();
        d_devid = (*iterator).getID();
        if ((*iterator).getDeviceType() == 50) {
            peanut_plug PL;
            PL.S_Dev_ID = (*iterator).getID();
            PL.S_state = false;
            PL.percentage = 0;
            peanut_plug_info.push_back(PL);
        }
    }
    sensorsCount = dL.devices.size();
    setKeyboardValidationFunction(&kbVal);
    readLCDArea.data = (int *) malloc(320 * 240 * sizeof (int));

    HADevices::initializeFree2();
    HADevices::genericCallback(&theCallback);
    HADevices::eventCallback(&theEventCallback);

    DoorUnlockButton.onTouch = &doorUnlock_onTouch;
    DoorLockButton.onTouch = &doorLock_onTouch;
    DoorLockButtonWithUserCode.onTouch = &doorLock_onTouch;
    DoorUnlockButtonWithUserCode.onTouch = &doorUnlock_onTouch;

    SwitchOnButton.onTouch = &switchOn_onTouch;
    SwitchOffButton.onTouch = &switchOn_offTouch;
    ACSwitchOnButton.onTouch = &switchOn_onTouch;
    ACSwitchOffButton.onTouch = &switchOn_offTouch;

    AdvanceButton.onTouch = &Advancebutton_onTouch;
    RetainButton.onTouch = &RetainButton_onTouch;
    checkforupgradeButton.onTouch = &upgradeButton_onTouch;
    upgradeButton.onTouch = &upgrade;

    GarageDoorOpenButton.onTouch = &GarageDoorOpen_onTouch;
    GarageDoorCloseButton.onTouch = &GarageDoorClose_onTouch;
    StopMSSirenButton.onTouch = &multilevelOff_onTouch;
    SelectSoundButton.onTouch = &SelectSoundButton_onTouch;

    EconModeButton.onTouch = &EconModeButton_onTouch;
    HeatModeButton.onTouch = &HeatModeButton_onTouch;
    TempBox.onTouch = &TempBoxOnTouch;
    ConfigurationButton.onTouch = &ConfigurationButton_onTouch;
    ConfigurationButton1.onTouch = &ConfigurationButton_onTouch;
    IRCodeSetText.onTouch = &IRCodeBox_onTouch;
    IRCodeSetButton.onTouch = &SetConfigurationButton_onTouch;
    ParameterSetText.onTouch = &ParameterBox_onTouch;
    ValueSetText.onTouch = &ConfigValueBox_onTouch;
    ValueSizeSetTextModifyPlus.onTouch = &ValueSizeSetTextModifyPlus_onTouch;
    ValueSizeSetTextModifyMinus.onTouch = &ValueSizeSetTextModifyMinus_onTouch;
    SetConfigurationButton.onTouch = &SetConfigurationButton_onTouch;

    ///////////////////////////////////////////////////////////////////////////newal2
    RemovedeviceButton.onTouch = &Remove_onTouch;
    TamperButton.onTouch = &Tamper_onTouch;
    PanicButton.onTouch = &Panic_onTouch;
    EmerButton.onTouch = &Emer_onTouch;

    YesButton.onTouch = &YesButton_onTouch;
    NoButton.onTouch = &NoButton_onTouch;
    EditButton.onTouch = &EditButton_onTouch;

    multilevelOnButton.onTouch = &multilevelOn_onTouch;
    multilevelOffButton.onTouch = &multilevelOff_onTouch;
    colorOnButton.onTouch = &multilevelOn_onTouch;
    colorOffButton.onTouch = &multilevelOff_onTouch;
    settingsButton.onTouch = &settings_onTouch;
   

    basicGetButton.onTouch = &basicGetButton_onTouch;
    basicGetTextBox.onTouch = &basicGetText_onTouch;
    basicSetButton.onTouch = &basicSetButton_onTouch;
    basicSetText.onTouch = &basicSetText_onTouch;
    basicSetTextModifyPlus.onTouch = &basicSetTextModifyPlus_onTouch;
    basicSetTextModifyMinus.onTouch = &basicSetTextModifyMinus_onTouch;
    MoreButton.onTouch = &moreGeneric_onTouch;

    MultiSwitchOnButton.onTouch = &MultiSwitchOnButton_onTouch;
    MultiSwitchOffButton.onTouch = &MultiSwitchOffButton_onTouch;
    MultiSwitchOnButton1.onTouch = &MultiSwitchOnButton1_onTouch;
    MultiSwitchOffButton1.onTouch = &MultiSwitchOffButton1_onTouch;
    //---------------//newgeneric---------------
    EmergencySoundButton.onTouch = &TypeOfSoundButton_onTouch;
    FireSoundButton.onTouch = &TypeOfSoundButton_onTouch;
    AmbulanceSoundButton.onTouch = &TypeOfSoundButton_onTouch;
    PoliceSoundButton.onTouch = &TypeOfSoundButton_onTouch;
    DoorSoundButton.onTouch = &TypeOfSoundButton_onTouch;
    BeepSoundButton.onTouch = &TypeOfSoundButton_onTouch;

    AlarmButton.onTouch = &AlarmButton_onTouch;
    SirenButton.onTouch = &SirenButton_onTouch;
    DoorBellButton.onTouch = &DoorBellButton_onTouch;
    LowVolume.onTouch = &AlmondSirenLowVolume_onTouch;
    MedVolume.onTouch = &AlmondSirenMedVolume_onTouch;
    HighVolume.onTouch = &AlmondSirenHighVolume_onTouch;
    AlmondTimer.onTouch = &AlmondTimer_onTouch;

    AlmondLedTimer.onTouch = &AlmondLedTimer_onTouch;
    ApplianceOne.onTouch = &applianceButton_OnTouch;
    ApplianceTwo.onTouch = &applianceButton_OnTouch;
    ApplianceThree.onTouch = &applianceButton_OnTouch;
    ApplianceFour.onTouch = &applianceButton_OnTouch;
    ApplianceFive.onTouch = &applianceButton_OnTouch;
    ApplianceSix.onTouch = &applianceButton_OnTouch;

    AppButtonOne.onTouch = &applianceEventButton_OnTouch;
    AppButtonTwo.onTouch = &applianceEventButton_OnTouch;
    AppButtonThree.onTouch = &applianceEventButton_OnTouch;
    AppButtonFour.onTouch = &applianceEventButton_OnTouch;
    AppButtonFive.onTouch = &applianceEventButton_OnTouch;
    AppButtonSix.onTouch = &applianceEventButton_OnTouch;
    AppButtonSeven.onTouch = &applianceEventButton_OnTouch;
    AppButtonEight.onTouch = &applianceEventButton_OnTouch;

    SelectIRLed.onTouch = &SelectIRLed_OnTouch;
    ChangeButtonName.onTouch = &ChangeButtonName_OnTouch;
    selectIRLedDone.onTouch = &selectIRLedDone_OnTouch;
    ChangeApplianceName.onTouch = &ChangeApplianceName_OnTouch;
    
    btnCapture.onTouch = &btnCaptureOnTouch;
    btnImageCount.onTouch = &ImageCountOnTouch;
    btnResolution.onTouch = &ResolutionOnTouch;

    btnDeActive.onTouch = &btndeativeOnTouch;
    

    timerD = open("/dev/almond_timer", O_RDONLY);
    info.pid = getpid();
    if (timerD < 0) {
        system("mknod /dev/almond_timer c 97 0");
        timerD = open("/dev/almond_timer", O_RDONLY);
        if (timerD < 0) {
            perror("Could not Open almond_timer\n");
            return;
        }

    }
    ioctl(timerD, SET_PID, &info); //&pidForTimerDriver);
    signal(SIGTSTP, saveVal);
    info.mills = 200;
    ioctl(timerD, SET_PERIOD, &info); //200);
    memset(ImageLoaded, -1, sizeof (ImageLoaded));
}

void connectedHome_init(void) {
    //img=pngImg.loadPNG("/almond/home_settings.png");
    moreIcon = pngImg.loadPNG("/almond/more.png");
    crossonTouch = pngImg.loadPNG("/almond/wrong_onTouch.png");
    // humidityImage = pngImg.loadPNG("/almond/water_off_20x20.png");
    critical = pngImg.loadPNG("/almond/critical_45x45.png");
    battery_c = pngImg.loadPNG("/almond/battery_critical.png");
    battery_icon = pngImg.loadPNG("/almond/battery_40x15.png");
    Tick = pngImg.loadPNG("/almond/Tick.png");
    in_home = pngImg.loadPNG("/almond/in.png");
    away_home = pngImg.loadPNG("/almond/out.png");
    crossdefault = pngImg.loadPNG("/almond/wrong_default.png");
    alarm_default = pngImg.loadPNG("/almond/alarm_default.png");
    alarm_onTouch = pngImg.loadPNG("/almond/alarm_onTouch.png");
    alarm_off_default = pngImg.loadPNG("/almond/alarm_off_default.png");
    alarm_off_onTouch = pngImg.loadPNG("/almond/alarm_off_onTouch.png");
    color_temp = pngImg.loadPNG("/almond/color_temperature.png");
    color_temp1 = pngImg.loadPNG("/almond/color_temperature_generic.png");
    color_png = pngImg.loadPNG("/almond/color_strip.png");
    fanImage = pngImg.loadPNG("/almond/fan_20x20.png");
    moreIcon = pngImg.loadPNG("/almond/more.png");
    color_png1 = pngImg.loadPNG("/almond/color_strip_generic.png");
    humidityImage = pngImg.loadPNG("/almond/water_off_20x20.png");
    arrow_plus = pngImg.loadPNG("/almond/arrow_plus.png");
    arrow_minus = pngImg.loadPNG("/almond/arrow_minus.png");
    pen_1 = pngImg.loadPNG("/almond/pen_icon_1.png");
    trash_png = pngImg.loadPNG("/almond/trashbinicon_white.png");
    trashopen_png = pngImg.loadPNG("/almond/trashbin_open.png");
    luminanceImage = pngImg.loadPNG("/almond/luminance_20x20.png"); //newgeneric
    color_shades = pngImg.loadPNG("/almond/color_shades.png");
    backButtonImg = pngImg.loadPNG("/almond/backimage.png");
    backButtonPressImg = pngImg.loadPNG("/almond/backimagePressed.png");
    
    filed = open("/dev/almond_lcd", O_RDONLY);
    if (filed < 0) {
        perror("open");
    }
}

void connectedHome_draw(void) {
    char pngImageNames[100][150] = {
        "/almond/unknown.png", /* 0 */
        "/almond/ON-OFF.png",
        "/almond/Light_bulb.png",
        "/almond/door_window_sensor.png",
        "/almond/Light_bulb.png",
        "/almond/door_lock.png",
        "/almond/Alarm.png",
        "/almond/thermostat.png",
        "/almond/door_window_sensor.png",
        "/almond/shade.png",
        "/almond/door_window_sensor.png", /* 10 */
        "/almond/motion.png",
        "/almond/door_sensor.png",
        "/almond/fire_sensor.png",
        "/almond/water_sensor.png",
        "/almond/door_window_sensor.png",
        "/almond/door_window_sensor.png",
        "/almond/door_window_sensor.png",
        "/almond/door_window_sensor.png",
        "/almond/key_fob.png",
        "/almond/door_window_sensor.png", /* 20 */
        "/almond/door_window_sensor.png",
        "/almond/ON-OFF.png",
        "/almond/ON-OFF.png",
        "/almond/temperature_sensor.png", //OccupancySensor
        "/almond/Light_sensor.png", // LightSensor
        "/almond/roller_shutter.png", // WindowCovering
        "/almond/temperature_sensor.png", // TemperatureSensor
        "/almond/door_lock.png", //ZigbeeDoorlock
        "/almond/temperature_sensor.png", // ColorControl, 
        "/almond/unknown.png", /* 30 */ // PressureSensor, 
        "/almond/unknown.png", //FlowSensor, 
        "/almond/Light_bulb.png", //ColorDimmableLight, 
        "/almond/unknown.png", //HAPump, 
        "/almond/unknown.png", //Shade, 
        "/almond/door_window_sensor.png", // MultilevelSensor,
        "/almond/door_window_sensor.png", // SmokeDetector,
        "/almond/water_sensor.png", // FloodSensor,
        "/almond/door_window_sensor.png", // ShockSensor,
        "/almond/door_sensor.png", // DoorSensor,
        "/almond/door_window_sensor.png", /* 40 */ // MoistureSensor,
        "/almond/motion.png", // MovementSensor
        "/almond/Alarm.png", //siren
        "/almond/ON-OFF.png", //MultiSwitch
        "/almond/ON-OFF.png", //UnknownOnOffModule
        "/almond/ON-OFF.png", //BinaryPowerSwitch
        "/almond/thermostat.png", //SetPointThermostat
        "/almond/unknown.png", //UnknownThermostat
        "/almond/Light_bulb.png", //HUE bulb
        "/almond/motion.png", //multisesor
        "/almond/ON-OFF.png", /* 50 *///peanutplug
        "/almond/unknown.png",
        "/almond/roller_shutter.png",
        "/almond/roller_shutter.png",
        "/almond/thermostat.png",
        "/almond/Alarm.png",
        "/almond/door_window_sensor.png",
        "/almond/thermostat.png",
        "/almond/nest_protect_icon_25x25.png",
        "/almond/unknown.png", //NotificationSensor
        "/almond/door_window_sensor.png", /* 60 */
        "/almond/key_fob.png",
        "/almond/thermostat.png",
        "/almond/Alarm.png",
        "/almond/Light_sensor.png",
        "/almond/thermostat.png"
    };

    connected_home->draw();
    startAt = curPage != 0 ? curPage * xCount * yCount - curPage : 0;
    it = dL.devices.begin();

    //char mode[500];
    int devicenum = 0, index = 0, indx = 0;
    /*Almond Al;
    Al.getAlmondProDB(AlmondMode, mode);
    HADevices::GetAlmondMode(mode); 
    sprintf(t_temp, "getalmondmode %s", mode);
    LOG(Logger::INFO, t_temp);
    strncpy(almond_mode, mode, 2);
    if (atoi(almond_mode) == 2) {
        pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, in_home);
    } else if (atoi(almond_mode) == 3) {
        pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, away_home);
    }*/
    sensorsCount = dL.devices.size();
    if (sensorsCount == 0) {
        ///Add the HomeAway
        drawText(lan.get("nosensors_1", "connected_sensor"), 30, 100, 250, 1, 0, 20.0f, 65535, 1);
        drawText(lan.get("nosensors_2", "connected_sensor"), 30, 125, 250, 1, 0, 20.0f, 65535, 1);
        return;
    }
    if (curPage != 0) {
        int temp_val;
        for (temp_val = 0; temp_val < startAt; temp_val++)
            it++;
    }
    for (int cY = 0; cY < yCount; cY++) {
        for (int cX = 0; cX < xCount; cX++) {
            if (((cX + cY * xCount) + (startAt)) > sensorsCount - 1) {
                MODE = LIST_MODE;
                return;
            }

            if (cX == xCount - 1 && cY == yCount - 1 && (((cX + cY * xCount) + (startAt)) != (sensorsCount - 1))) {
                drawTransparentRectangle(xCoords[cX], yCoords[cY], xCoords[cX] + 140, yCoords[cY] + 50, WIDGET_CONTAINER_LAYER, 150);
                swprintf(opt, 179, L"%ls", lan.get("moresensor_1", "connected_sensor"));
                swprintf(opt, 179, L"%ls\n%ls", opt, lan.get("moresensor_2", "connected_sensor"));
                drawText(opt, xCoords[cX] + 22, yCoords[cY] + 8, 118, 2, 0, 16.0f, 65535, 1);
                memset(opt, 0, sizeof opt);
                pngImg.drawPNG(xCoords[cX] + 1, yCoords[cY] + 15, 1, BACKGROUND_LAYER, moreIcon);
            } else {
                drawTransparentRectangle(xCoords[cX], yCoords[cY], xCoords[cX] + 140, yCoords[cY] + 50, WIDGET_CONTAINER_LAYER, 150);
                int nameLen = strlen((*it).getDeviceName());
                bzero(&opt, sizeof opt);
                utf8_to_wchar((*it).getDeviceName(), nameLen, opt, nameLen, UTF8_IGNORE_ERROR);
                drawText(opt, xCoords[cX] + 22, yCoords[cY] + 17, 118, 1, 0, 16.0f, 65535, 1);
                memset(opt, 0, sizeof (opt));
                devicenum = (int) (*it).getDeviceType();
                if (pngImageNames[devicenum][0] != 0) {
                    if (index = checkifImageAlreadyLoaded(pngImageNames[devicenum], &indx)) {
                        ImageLoaded[index] = sensorImg.loadPNG(pngImageNames[devicenum]);
                        sprintf(t_temp, "Image loaded :imageload[%d]:%d indx:%d", index, ImageLoaded[index], indx);
                        LOG(Logger::INFO, t_temp);
                        sensorImg.drawPNG(xCoords[cX] + 1, yCoords[cY] + 15, 1, BACKGROUND_LAYER, ImageLoaded[index]);
                    } else {
                        sprintf(t_temp, "Image drawn :indx:%d", indx);
                        LOG(Logger::INFO, t_temp);
                        sensorImg.drawPNG(xCoords[cX] + 1, yCoords[cY] + 15, 1, BACKGROUND_LAYER, indx);
                    }
                }
                indx = 0;
            }
            it++;
        }
        MODE = LIST_MODE;
    }
}

float getTempinFloat(char *str) {
    int i = 0;
    char tbuff[10] = "";
    while (str[i] && (str[i] >= '0' && str[i] <= '9') || str[i] == '.') {
        tbuff[i] = str[i++];
    }
    return atof(tbuff);
}

void btnCaptureOnTouch() {
    readArea(0, 0, 319, 239);
    connectedHomeSetValue(4, "true");
    Modal mW;
    mW.setLine1(L"");
    mW.setLine2(L"Please wait");
    mW.setLine3(L" Capturing...");
    mW.modalReturn = &drawArea;
    mW.draw(MODAL_TYPE_INFORMATION, 60);
}

void ImageCountOnTouch() {
    wcscmp(btnImageCount.W.text,  L"3") == 0 ? connectedHomeSetValue(6, 6) : connectedHomeSetValue(6, 3) ;
}

void ResolutionOnTouch() {
    wcscmp(btnResolution.W.text,  L"VGA") == 0 ? connectedHomeSetValue(7, 2) : connectedHomeSetValue(7, 1);
}

void btndeativeOnTouch() {
    connectedHomeSetValue(1, "false");
}
void tH(int x, int y) {
  //pngImg.drawPNG(40,55, 1,BACKGROUND_LAYER, img1);
  //pngImg.drawPNG(130,55, 1,BACKGROUND_LAYER, img2);
  connected_home->getTouch(x,y);

    if (a == false) 
    {   usleep(20000);
        return;
    }

    if (kbMode || MODE == KEYBOARD_MODE) {
        kb1->getTouch(x, y);
        kb3->getTouch(x, y);
        kb4->getTouch(x, y);
        kb5->getTouch(x, y); //newgeneric
        kb6->getTouch(x, y); //newal2
        kb7->getTouch(x, y); //newal2
        kb9->getTouch(x, y);
        
        connected_home->getTouch(x,y);
        return;
    }
    if (MODE == LIST_MODE) {
        connected_home->getTouch(x, y);
       /* if (x > 275 && x < 275 + 40 && y > 5 && y < 5 + 40) {
            char *ptr = NULL;
            char mode[500], data[500], email[500];
            Almond Al;
            Al.getAlmondProDB(AlmondMode, data);
            HADevices::GetAlmondMode(data);  
            LOG(Logger::INFO, data);
            strncpy(almond_mode, data, 2);
            FILE *fp;
            if (fp = fopen("/almond/email", "r")) {
                fgets(email, 180, fp);
                strcpy(data + 2, email);
                fclose(fp);
            }
            almond_mode[1] = '\0';
            if (atoi(almond_mode) == 2) {
                waitForPenUp();
                ptr = strchr(data + 2, '\n');
                if (ptr != NULL) {
                    *ptr = '\0';
                }
                sprintf(mode, "3 %s", data + 2);
                pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, away_home);
            } else if (atoi(almond_mode) == 3) {
                waitForPenUp();
                ptr = strchr(data + 2, '\n');
                if (ptr != NULL) {
                    *ptr = '\0';
                }
                sprintf(mode, "2 %s", data + 2);
                pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, in_home);
            }
            LOG(Logger::INFO, mode);
            if (Al.setAlmondProDB(AlmondMode, mode)) {  
                LOG(Logger::INFO, "setting almond mode success");
            } else {
                LOG(Logger::INFO, "setting almond mode failure");
            }
        }*/
        for (int cY = 0; cY < yCount; cY++) {
            for (int cX = 0; cX < xCount; cX++) {
                if (x > xCoords[cX] && y > yCoords[cY] && x < xCoords[cX] + 140 && y < yCoords[cY] + 50) {
                    if (((cX + cY * xCount) + (startAt)) > sensorsCount - 1)
                        return;

                    readArea(xCoords[cX], yCoords[cY], 141, 51);
                    if (cX == xCount - 1 && cY == yCount - 1 && (((cX + cY * xCount) + (startAt)) != (sensorsCount - 1))) {
                        drawTransparentRectangle(xCoords[cX], yCoords[cY], xCoords[cX] + 140, yCoords[cY] + 50, 65535, 60);
                        waitForPenUp();
                        drawArea();
                        more_onTouch();
                        return;
                    } else {
                        drawTransparentRectangle(xCoords[cX], yCoords[cY], xCoords[cX] + 140, yCoords[cY] + 50, 65535, 60);
                        waitForPenUp();
                        drawArea();
                        deviceToControl = devIdList[(startAt)+(cX + cY * xCount)];
                        for (it = dL.devices.begin(); it != dL.devices.end(); ++it) {
                            if (deviceToControl == (*it).getID()) {
                                drawControlDevice((*it));
                                break;
                            }
                        }

                    }
                }
            }
        }

    } else if (MODE == CONTROL_MODE) {
        if (x > 282 && x < 317 && y > 47 && y < 83) { //close button
            readArea(0, 0, 319, 239);
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            gen.p_area = 0;
            multiswitch = false;
            waitForPenUp();
            LOG(Logger::INFO, "Close button pressed");
            lcd_clear(BACKGROUND_LAYER);
            MODE = LIST_MODE;
            connectedHome_draw();
            return;
        }
        if ((contDev != NestThermostat) && (contDev != NestSmokeDetector) && (contDev != AlmondSiren) && (contDev != AlmondBlink)) {
            EditButton.checkTouch(x, y);
        }
        memset(opt, 0, sizeof (opt));
        switch (contDev) {
            case UnknownOnOffModule:
            case BinarySwitch:
            case BinaryPowerSwitch:
                if (SwitchOnButton.checkTouch(x, y))
                    return;
                else if (SwitchOffButton.checkTouch(x, y))
                    return;
                break; //Switch";
            case MultilevelSwitch:

                if (x > RECT_X + 10 && y > RECT_Y && x < RECT_X + RECT_WIDTH - 10 && y < RECT_Y + RECT_HEIGHT) {
                    while (x > RECT_X + 10 && y > RECT_Y && x < RECT_X + RECT_WIDTH - 10 && y < RECT_Y + RECT_HEIGHT) {
                        if (x > RECT_X + RECT_WIDTH - 10) {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(RECT_X + 6, RECT_Y, RECT_X + RECT_WIDTH - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(RECT_X + 5, RECT_Y + (RECT_HEIGHT / 2), RECT_X + RECT_WIDTH - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(RECT_X + RECT_WIDTH - 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 100 * 2;
                        } else if (x < RECT_X) {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(RECT_X + 6, RECT_Y, RECT_X + RECT_WIDTH - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(RECT_X + 5, RECT_Y + (RECT_HEIGHT / 2), RECT_X + RECT_WIDTH - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(RECT_X + 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 0 * 2;
                        } else {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(RECT_X + 6, RECT_Y, RECT_X + RECT_WIDTH - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(RECT_X + 5, RECT_Y + (RECT_HEIGHT / 2), RECT_X + RECT_WIDTH - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(x, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = (x - (RECT_X + 10));
                        }

                        usleep(90000);
                        x = readX();
                        y = readY();
                    }
                    connectedHomeSetValue(1, (dimmerCurrLevel / 2));
                    return;
                }

                multilevelOnButton.checkTouch(x, y);
                multilevelOffButton.checkTouch(x, y);
                break; //Dimmer";
            case MultilevelSwitchOnOff:

                if (x > 25 + 10 && y > RECT_Y && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT) {
                    while (x > 25 + 10 && y > RECT_Y && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT) {
                        if (x > 301 - 10) {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(25 + 6, RECT_Y, 301 - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(301 - 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 255;
                        } else if (x < RECT_X) {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(25 + 6, RECT_Y, RECT_X + RECT_WIDTH - 6, 301, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(25 + 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 0;
                        } else {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(25 + 6, RECT_Y, 301 - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(x, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = (x - (25 + 10));
                        }

                        usleep(90000);
                        x = readX();
                        y = readY();
                    }
                    connectedHomeSetValue(1, dimmerCurrLevel);
                    return;
                }

                multilevelOnButton.checkTouch(x, y);
                multilevelOffButton.checkTouch(x, y);
                break; //Dimmer";
            case ColorDimmableLight:
            {


                if (x > 25 + 10 && y > RECT_Y && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT) {
                    while (x > 25 + 10 && y > RECT_Y && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT) {
                        if (x > 301 - 10) {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(25 + 6, RECT_Y, 301 - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(301 - 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 255;
                        } else if (x < RECT_X) {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(25 + 6, RECT_Y, RECT_X + RECT_WIDTH - 6, 301, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(25 + 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 0;
                        } else {
                            //fillCircle(90 + dimmerCurrLevel, 155, 7, RGB(23, 191, 227));
                            fillRect(25 + 6, RECT_Y, 301 - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(x, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = (x - (25 + 10));
                        }

                        usleep(90000);
                        x = readX();
                        y = readY();
                    }
                    connectedHomeSetValue(1, dimmerCurrLevel);
                    return;
                } else if (x > 25 && y > RECT_Y + 40 && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT + 40) {
                    int s_val;
                    while (x > 25 && y > RECT_Y + 40 && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT + 40) {
                        pngImg.drawPNG(25, RECT_Y + 40, 1, 0, color_temp);
                        drawLine(x - 2, RECT_Y + 40, x - 2, RECT_Y + 40 + RECT_HEIGHT, 0);
                        s_val = ((x - 25)*32) + 1000; //colortemperature 
                        usleep(90000);
                        x = readX();
                    }
//                    setbulbcolortemperature(s_val);
                    connectedHomeSetValue(5, s_val);
                }
                colorOnButton.checkTouch(x, y);
                colorOffButton.checkTouch(x, y);
                settingsButton.checkTouch(x, y);
            }
                break;
            case DoorLock:
            case ZigbeeDoorLock:
            {

                int UsrNum = 0;
                Device *d = getDevice(contDevID);
                if (d) {
                    if (d->getDeviceTechnology() == ZWaveTechnology)
                        UsrNum = atoi(d->getValue(4));
                    else
                        UsrNum = atoi(d->getValue(3));

                    if (UsrNum) {
                        if (DoorLockButtonWithUserCode.checkTouch(x, y)) {
                            return;
                        } else if (DoorUnlockButtonWithUserCode.checkTouch(x, y)) {
                            return;
                        } else if (x > 159 && x < 186 && y > 127 && y < 154) {
                            waitForPenUp();
                            UserNoBackButton_onTouch();
                            return;
                        } else if (x > 219 && x < 246 && y > 127 && y < 154) {
                            waitForPenUp();
                            UserNoNextButton_onTouch();
                            return;
                        } else if (x > 234 && x < 256 && y > 159 && y < 181) {
                            PinboxonTouch();
                            return;
                        } else if (x > 274 && x < 296 && y > 159 && y < 181) {
                            fillRect(274, 159, 296, 181, RR_COLOR);
                            pngImg.drawPNG(275, 160, 1, BACKGROUND_LAYER, trashopen_png);
                            waitForPenUp();
                            fillRect(274, 159, 296, 181, RR_COLOR);
                            pngImg.drawPNG(275, 160, 1, BACKGROUND_LAYER, trash_png);
                            strcpy(Userpin, "");
                            if (d->getDeviceTechnology() == ZWaveTechnology) {
                                connectedHomeSetValue(Userno + 4, "");
                            } else {
                                connectedHomeSetValue(Userno + 3, "");
                            }
                            return;
                        } else if ((d->getDeviceTechnology() == ZWaveTechnology) && (x > 243 && x < 283 && y > 62 && y < 67)) {
                            waitForPenUp();
                            getBatteryVal();
                            return;
                        }
                    } else {
                        if (DoorLockButton.checkTouch(x, y)) {
                            return;
                        } else if (DoorUnlockButton.checkTouch(x, y)) {
                            return;
                        }
                    }
                }
                break; //Door Lock";
            }
            case ZenThermostat:
            case Thermostat:

            {
                Device *d = getDevice(contDevID);
                if (x > THERMO_COOL_X + 10 && y > THERMO_COOL_Y && x < THERMO_COOL_X + THERMO_COOL_WIDTH - 10 && y < THERMO_COOL_Y + THERMO_COOL_HEIGHT) {
                    while (x > THERMO_COOL_X + 10 && y > THERMO_COOL_Y && x < THERMO_COOL_X + THERMO_COOL_WIDTH - 10 && y < THERMO_COOL_Y + THERMO_COOL_HEIGHT) {
                        if (x > (THERMO_COOL_X + 10) && x < (THERMO_COOL_X + THERMO_COOL_WIDTH - 10)) {
                            fillRect(THERMO_COOL_X + 6, THERMO_COOL_Y, THERMO_COOL_X + THERMO_COOL_WIDTH - 6, THERMO_COOL_Y + THERMO_COOL_HEIGHT, RGB(23, 191, 227));
                            drawLine(THERMO_COOL_X + 5, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), THERMO_COOL_X + THERMO_COOL_WIDTH - 5, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 65535);
                            fillCircle(x, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 5, 65535);
                            thermoCoolCurrLevel = x - THERMO_COOL_X - 10;
                        }
                        usleep(90000);
                        x = readX();
                        y = readY();
                    }
//                    setThermoCoolCurrLevel(((thermoCoolCurrLevel) / 3) + 35);
                    connectedHomeSetValue(5, ((thermoCoolCurrLevel) / 3) + 35);
                } else if (x > THERMO_HEAT_X + 10 && y > THERMO_HEAT_Y && x < THERMO_HEAT_X + THERMO_HEAT_WIDTH - 10 && y < THERMO_HEAT_Y + THERMO_HEAT_HEIGHT) {
                    while (x > THERMO_HEAT_X + 10 && y > THERMO_HEAT_Y && x < THERMO_HEAT_X + THERMO_HEAT_WIDTH - 10 && y < THERMO_HEAT_Y + THERMO_HEAT_HEIGHT) {
                        if (x > THERMO_HEAT_X + 10 && x < THERMO_HEAT_X + THERMO_HEAT_WIDTH - 10) {
                            fillRect(THERMO_HEAT_X + 6, THERMO_HEAT_Y, THERMO_HEAT_X + THERMO_HEAT_WIDTH - 6, THERMO_HEAT_Y + THERMO_HEAT_HEIGHT, RGB(23, 191, 227));
                            drawLine(THERMO_HEAT_X + 5, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 65535);
                            fillCircle(x, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 5, 65535);
                            thermoHeatCurrLevel = x - THERMO_HEAT_X - 10;
                        }
                        usleep(90000);
                        x = readX();
                        y = readY();
                    }
//                    setThermoHeatCurrLevel((thermoHeatCurrLevel / 3) + 35);
                    connectedHomeSetValue(4, (thermoHeatCurrLevel / 3) + 35);
                } else if (x > 60 && x < 110 && y > 97 && y < 125) { //auto
                    fillRect(60, 97, 110, 125, RGB(23, 191, 227));
                    fillRect(115, 97, 165, 125, BUTTON_LAYER);
                    fillRect(170, 97, 220, 125, BUTTON_LAYER);
                    drawText(lan.get("auto", "connected_sensor"), 60, 103, 50, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("cool", "connected_sensor"), 115, 103, 50, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("heat", "connected_sensor"), 170, 103, 50, 1, 0, 16.0f, 65535, 1);
//                    setThermostatMode("Auto");
                    connectedHomeSetValue(2, "Auto");
                    waitForPenUp();
                } else if (x > 115 && x < 165 && y > 97 && y < 125) { //cool
                    fillRect(60, 97, 110, 125, BUTTON_LAYER);
                    fillRect(115, 97, 165, 125, RGB(23, 191, 227));
                    fillRect(170, 97, 220, 125, BUTTON_LAYER);
                    drawText(lan.get("auto", "connected_sensor"), 60, 103, 50, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("cool", "connected_sensor"), 115, 103, 50, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("heat", "connected_sensor"), 170, 103, 50, 1, 0, 16.0f, 65535, 1);
//                    setThermostatMode("Cool");
                    connectedHomeSetValue(2, "Cool");
                    waitForPenUp();
                } else if (x > 170 && x < 220 && y > 97 && y < 125) { //heat
                    fillRect(60, 97, 110, 125, BUTTON_LAYER);
                    fillRect(115, 97, 165, 125, BUTTON_LAYER);
                    fillRect(170, 97, 220, 125, RGB(23, 191, 227));
                    drawText(lan.get("auto", "connected_sensor"), 60, 103, 50, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("cool", "connected_sensor"), 115, 103, 50, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("heat", "connected_sensor"), 170, 103, 50, 1, 0, 16.0f, 65535, 1);
//                    setThermostatMode("Heat");
                    connectedHomeSetValue(2, "Heat");
                    waitForPenUp();
                } else if ((x > 60 && x < 135 && y > 190 && y < 218) && ((d->getValueCount() != 10) || (d->getDeviceTechnology() == ZigBeeTechnology))) { //Auto Low
                    fillRect(60, 190, 135, 218, RGB(23, 191, 227));
                    fillRect(140, 190, 215, 218, BUTTON_LAYER);
                    drawText(lan.get("auto_low", "connected_sensor"), 60, 195, 75, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("on_low", "connected_sensor"), 140, 195, 75, 1, 0, 16.0f, 65535, 1);
//                    setThermostatFanMode("Auto Low");
                    connectedHomeSetValue(6, "Auto Low");
                    waitForPenUp();
                } else if ((x > 140 && x < 215 && y > 190 && y < 218) && ((d->getValueCount() != 10) || (d->getDeviceTechnology() == ZigBeeTechnology))) { //On Low
                    fillRect(60, 190, 135, 218, BUTTON_LAYER);
                    fillRect(140, 190, 215, 218, RGB(23, 191, 227));
                    drawText(lan.get("auto_low", "connected_sensor"), 60, 195, 75, 1, 0, 16.0f, 65535, 1);
                    drawText(lan.get("on_low", "connected_sensor"), 140, 195, 75, 1, 0, 16.0f, 65535, 1);
//                    setThermostatFanMode("On Low");
                    connectedHomeSetValue(6, "On Low");
                    waitForPenUp();
                } else if (x > 225 && x < 300 && y > 97 && y < 125) {
                    waitForPenUp();
                    fillRect(225, 97, 300, 125, RGB(50, 191, 20));
                    convertTemperature(1, opt, true);
                    drawText(opt, 225, 97 + 6, 75, 1, 0, 18.0f, 65535, 1);
                } else if (x > 240 && y > 60 && x < 280 && y < 75) {
                    waitForPenUp();
                    getBatteryVal();
                    return;
                } else if ((x > 60 && x < 100 && y > 190 && y < 218) && (d->getValueCount() == 10)) {//Auto Low with RH
                    fillRect(60, 190, 100, 218, !(strstr(thermoFan, "Auto Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                    fillRect(110, 190, 150, 218, !(strstr(thermoFan, "On Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                    drawText(L"Auto", 62, 195, 40, 1, 0, 16.0f, 65535, 1);
                    drawText(L"On", 110, 195, 40, 1, 0, 16.0f, 65535, 1);
                    pngImg.drawPNG(60, 197, 1, BACKGROUND_LAYER, Tick);
//                    setThermostatFanMode("Auto Low");
                    connectedHomeSetValue(6, "Auto Low");
                    waitForPenUp();
                } else if ((x > 110 && x < 150 && y > 190 && y < 218) && (d->getValueCount() == 10)) { //On Low with RH
                    fillRect(60, 190, 100, 218, !(strstr(thermoFan, "Auto Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                    fillRect(110, 190, 150, 218, !(strstr(thermoFan, "On Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                    drawText(L"Auto", 62, 195, 40, 1, 0, 16.0f, 65535, 1);
                    drawText(L"On", 110, 195, 40, 1, 0, 16.0f, 65535, 1);
                    pngImg.drawPNG(110, 197, 1, BACKGROUND_LAYER, Tick);
//                    setThermostatFanMode("On Low");
                    connectedHomeSetValue(6, "On Low");
                    waitForPenUp();
                }
            }
                break; //Thermostat";
            case Gateway:
                break; //Gateway";
            case SceneController:
                break; //Scene Control";
            case SmartACSwitch:
            {
                if (ACSwitchOnButton.checkTouch(x, y))
                    return;
                else if (ACSwitchOffButton.checkTouch(x, y))
                    return;
            }
                break; //Switch";
            case SecurifiSmartSwitch:
            {
                if (ACSwitchOnButton.checkTouch(x, y))
                    return;
                else if (ACSwitchOffButton.checkTouch(x, y))
                    return;
                else if (AdvanceButton.checkTouch(x, y))
                    return;
            }
                break;
            case KeyFob:
            {
                Device localD(contDevID);
                if (strcmp(localD.getValue(2), "true") == 0) {
                    PanicButton.checkTouch(x, y);
                }
                if (strcmp(localD.getValue(3), "true") == 0) {
                    EmerButton.checkTouch(x, y);
                }
            }
                break;
            case StandardWarningDevice:
            {
                if ((x > 45 && x < 125 && y > 125 && y < 195)) { //Alarm
                    pngImg.drawPNG(40, NOTIFICATION_Y - 5, 1, BACKGROUND_LAYER, alarm_onTouch);
                    drawText(lan.get("alarm", "connected_sensor"), NOTIFICATION_X + 17, NOTIFICATION_Y + 27, 110, 1, 0, 25.0f, 65535, 1);
                    waitForPenUp();
                    LOG(Logger::INFO, "Alarm On");
//                    Sirenon_onTouch(65535);
                    connectedHomeSetValue(1, "65535");
                    WDTime->setText(L"65535");
                    WDTime->draw();
                    pngImg.drawPNG(40, NOTIFICATION_Y - 5, 1, BACKGROUND_LAYER, alarm_default);
                    drawText(lan.get("alarm", "connected_sensor"), NOTIFICATION_X + 17, NOTIFICATION_Y + 27, 110, 1, 0, 25.0f, 65535, 1);
                } else if (x > 200 && x < 280 && y > 125 && y < 195) {//Alarm off
                    pngImg.drawPNG(195, NOTIFICATION_Y - 5, 1, BACKGROUND_LAYER, alarm_off_onTouch);
                    drawText(lan.get("off_1", "common"), NOTIFICATION_X + 175, NOTIFICATION_Y + 27, 100, 1, 0, 25.0f, 65535, 1);
                    waitForPenUp();
                    LOG(Logger::INFO, "Alarm Off");
//                    Sirenoff_onTouch();
                    connectedHomeSetValue(1, "0");
                    WDTime->setText(L"0");
                    WDTime->draw();
                    pngImg.drawPNG(195, NOTIFICATION_Y - 5, 1, BACKGROUND_LAYER, alarm_off_default);
                    drawText(lan.get("off_1", "common"), NOTIFICATION_X + 175, NOTIFICATION_Y + 27, 100, 1, 0, 25.0f, 65535, 1);
                }
                WDTime->checkTouch(x, y);
                Device d(contDevID);
                if (strcmp(d.getValue(3), "true") == 0 || enableTouch == true) {
                    enableTouch = false;
                    TamperButton.checkTouch(x, y);
                }
            }
                break;
            case RemoteControl:
            {
                Device *d = getDevice(contDevID);
                if (wcscmp(btnDeActive.W.text, L"Deactivate") == 0) {
                    btnDeActive.checkTouch(x, y);
                }
                if (d->getIndexNoFromName("TAMPER", -1) > 0 && enableTouch == true) {
                    enableTouch = false;
                    TamperButton.checkTouch(x, y);
                }
            }
                break;
            case LightSensor:
            {
                Device *d = getDevice(contDevID);
                if ((x > 240 && y > 60 && x < 280 && y < 75) && d->getIndexNoFromName("BATTERY", -1) > 0) {
                    waitForPenUp();
                    getBatteryVal();
                } else if (x > 190 && y > 95 && x < 300 && y < 125) {
                    int i;
                    if ((i = d->getIndexNoFromName("TEMPERATURE", -1)) > 0) {
                        waitForPenUp();
                        fillRect(190, 95, 300, 125, GREEN_COLOR);
                        memset(opt, 0, sizeof (opt));
                        convertTemperature(i, opt, true);
                        drawText(opt, 200, 100, 100, 1, 0, 20.0f, 65535, 1);
                    }
                } else if (d->getIndexNoFromName("TAMPER", -1) > 0 && enableTouch == true) {
                    enableTouch = false;
                    TamperButton.checkTouch(x, y);
                }
            }
                break;
            case ZigbeeMultiSensor:
            {
                Device *d = getDevice(contDevID);
                if (x > 190 && y > 95 && x < 300 && y < 125) {
                    int i;
                    if ((i = d->getIndexNoFromName("TEMPERATURE", -1)) > 0) {
                        waitForPenUp();
                        fillRect(190, 95, 300, 125, GREEN_COLOR);
                        memset(opt, 0, sizeof (opt));
                        convertTemperature(i, opt, true);
                        drawText(opt, 200, 100, 100, 1, 0, 20.0f, 65535, 1);
                    }
                } else if (d->getIndexNoFromName("TAMPER", -1) > 0 && enableTouch == true) {
                    enableTouch = false;
                    TamperButton.checkTouch(x, y);
                }
            }
                break;
            case ContactSwitch:
            case StandardCIE:
            case MotionSensor:
            case FireSensor:
            case WaterSensor:
            case GasSensor:
            case PersonalEmergencyDevice:
            case VibrationOrMovementSensor:
            case Keypad:
            case Alarm:
            case TemperatureSensor:
            case SmokeDetector:
            case DoorSensor:
            case MovementSensor:
            case ShockSensor:
            case BinarySensor:
            case FloodSensor:
            {
                Device *d = getDevice(contDevID);
                if (x > 240 && y > 60 && x < 280 && y < 75) {
                    waitForPenUp();
                    getBatteryVal();
                    return;
                } else {
                    if (d) {
                        if (strcmp(d->getValue(3), "true") == 0) {
                            enableTouch = false;
                            TamperButton.checkTouch(x, y);
                        }
                    } 
                }
                if (strcmp(d->getValue(4), "NaN") && strcmp(d->getValue(4), "#ERR")) {
                    if (x > 200 && x < 300 && y > 92 && y < 120) {
                        waitForPenUp();
                        convertTemperature(4, opt, true);
                        fillRect(215, 93, 300, 122, GREEN_COLOR);

                        drawText(opt, 215, 95, 85, 1, 0, 25.0f, 65535, 1);
                    }
                }
            }
                break;
            case MoistureSensor:
            {
                if ((x > 190 && y > 95 && x < 300 && y < 125)) {
                    waitForPenUp();
                    fillRect(190, 95, 300, 125, GREEN_COLOR);
                    convertTemperature(1, opt, true);
                    drawText(opt, 200, 100, 100, 1, 0, 25.0f, 65535, 1);
                }
            }
            break;
            case OccupancySensor:
            {

                if (x > 140 && x < 240 && y > 130 && y < 165) {
                    waitForPenUp();
                    convertTemperature(2, opt, true);
                    fillRect(140, 130, 240, 165, GREEN_COLOR);

                    drawText(opt, 140, 133, 100, 1, 0, 30.0f, 65535, 1);

                }
            }
                break;
            case ZigbeeTempSensor:
            {
                Device *d = getDevice(contDevID);
                if (x > 180 && x < 260 && y > 105 && y < 135) {
                    int i;
                    if ((i = d->getIndexNoFromName("TEMPERATURE", -1)) > 0) {
                        waitForPenUp();
                        memset(opt, 0, sizeof (opt));
                        convertTemperature(i, opt, true);
                        fillRect(180, 105, 260, 135, GREEN_COLOR);
                        drawText(opt, 185, 110, 70, 1, 0, 20.0f, 65535, 1);

                    }
                }
            }
                break;
            case SecurifiButton:
            {
                Device *d = getDevice(contDevID);
                if (strcmp(d->getValue(3), "true") == 0) {
                    TamperButton.checkTouch(x, y);
                }

            }
                break;
            case WindowCovering:
            {
                if (x > 25 && y > 95 && x < 105 && y < 125) {
                    fillRect(25, 95, 105, 125, BUTTON_LAYER_ONTOUCH);
                    drawText(L"Up", 25, 101, 80, 1, 0, 18.0f, 65535, 1);
                    waitForPenUp();
                    fillRect(25, 95, 105, 125, BUTTON_LAYER);
                    drawText(L"Up", 25, 101, 80, 1, 0, 18.0f, 65535, 1);
//                    setWindowCoveringMode(1);
                    connectedHomeSetValue(1, "1");
                } else if (x > 120 && y > 95 && x < 200 && y < 125) {
                    fillRect(120, 95, 200, 125, BUTTON_LAYER_ONTOUCH);
                    drawText(L"Down", 120, 101, 80, 1, 0, 18.0f, 65535, 1);
                    waitForPenUp();
                    fillRect(120, 95, 200, 125, BUTTON_LAYER);
                    drawText(L"Down", 120, 101, 80, 1, 0, 18.0f, 65535, 1);
//                    setWindowCoveringMode(2);
                    connectedHomeSetValue(1, "2");
                } else if (x > 215 && y > 95 && x < 295 && y < 125) {
                    fillRect(215, 95, 295, 125, BUTTON_LAYER_ONTOUCH);
                    drawText(L"Stop", 215, 101, 80, 1, 0, 18.0f, 65535, 1);
                    waitForPenUp();
                    fillRect(215, 95, 295, 125, BUTTON_LAYER);
                    drawText(L"Stop", 215, 101, 80, 1, 0, 18.0f, 65535, 1);
//                    setWindowCoveringMode(3);
                    connectedHomeSetValue(1, "3");
                }
            }
                break;
            case GenericDevice:
            {
                genericControlDeviceTouch(x, y);
                return;
            }
                break;
            case GarageDoorOpener://newal2
            {
                if (GarageDoorOpenButton.checkTouch(x, y)) {
                    return;
                }
                if (GarageDoorCloseButton.checkTouch(x, y)) {
                    return;
                }
            }
                break;

            case MultiSoundSiren://newal2
            {
                waitForPenUp();
                if (StopMSSirenButton.checkTouch(x, y))
                    return;
                if (SelectSoundButton.checkTouch(x, y))
                    return;
            }
                break;
            case EnergyReader://newal2
            case MultiSensor://newal2
            {
                if ((x > 190 && y > 95 && x < 300 && y < 125) && contDev != EnergyReader) {
                    waitForPenUp();
                    fillRect(190, 95, 300, 125, GREEN_COLOR);
                    convertTemperature(4, opt, true);
                    drawText(opt, 200, 100, 100, 1, 0, 25.0f, 65535, 1);
                } else if (x > 240 && y > 60 && x < 280 && y < 75) {
                    waitForPenUp();
                    getBatteryVal();
                    return;
                }

            }
                break;

            case RollerShutter://newal2
            {
                if ((x > 40 && x < 120 && y > 110 && y < 140)) {
                    drawRoundedRectangle(40, 110, 120, 140, RGB(0, 100, 200), 255);
                    drawText(lan.get("open", "connected_sensor"), 45, 115, 80, 1, 0, 20.0f, 65535, 1);
                    waitForPenUp();
                    connectedHomeSetValue(1, "99");
                    drawRoundedRectangle(40, 110, 120, 140, BUTTON_LAYER, 255);
                    drawText(lan.get("open", "connected_sensor"), 45, 115, 80, 1, 0, 20.0f, 65535, 1);
                } else if ((x > 200 && x < 280 && y > 110 && y < 140)) {
                    drawRoundedRectangle(200, 110, 280, 140, RGB(0, 100, 200), 255);
                    drawText(L"up", 200, 115, 80, 1, 0, 20.0f, 65535, 1);
                    waitForPenUp();
                    connectedHomeSetValue(2, "99");
                    //basicSetValue(99);
                    drawRoundedRectangle(200, 110, 280, 140, BUTTON_LAYER, 255);
                    drawText(L"up", 200, 115, 80, 1, 0, 20.0f, 65535, 1);
                    //drawText(lan.get("up", "connected_sensor"), 273, 115, 100, 1, 0, 26.0f, 65535, 1);
                } else if ((x > 40 && x < 120 && y > 150 && y < 180)) {
                    drawRoundedRectangle(40, 150, 120, 180, RGB(0, 100, 200), 255);
                    drawText(L"close", 45, 155, 80, 1, 0, 20.0f, 65535, 1);
                    waitForPenUp();
                    connectedHomeSetValue(1, "0");
                    drawRoundedRectangle(40, 150, 120, 180, BUTTON_LAYER, 255);
                    drawText(L"close", 45, 155, 80, 1, 0, 20.0f, 65535, 1);
                } else if ((x > 200 && x < 280 && y > 150 && y < 180)) {
                    drawRoundedRectangle(200, 150, 280, 180, RGB(0, 100, 200), 255);
                    drawText(L"down", 200, 155, 80, 1, 0, 20.0f, 65535, 1);
                    waitForPenUp();
//                    basicSetButton_onTouch();
                    connectedHomeSetValue( 2, basicVal);
                    drawRoundedRectangle(200, 150, 280, 180, BUTTON_LAYER, 255);
                    drawText(L"down", 200, 155, 80, 1, 0, 20.0f, 65535, 1);
                } else if ((x > 125 && x < 195 && y > 130 && y < 170)) {
                    drawRoundedRectangle(125, 130, 195, 170, RGB(255, 17, 0), 255);
                    drawText(L"STOP", 135, 140, 80, 1, 0, 25.0f, 65535, 0);
                    waitForPenUp();
                    connectedHomeSetValue(3, "");
                    drawRoundedRectangle(125, 130, 195, 170, RGB(247, 35, 20), 255);
                    drawText(L"STOP", 135, 140, 80, 1, 0, 25.0f, 65535, 0);
                }
            }
                break;

            case Siren://newal2
            {
                if (x > 240 && y > 60 && x < 280 && y < 75) {
                    waitForPenUp();
                    getBatteryVal();
                    return;
                } else if (x > 40 && y > 140 && x < 140 && y < 185) {//alarm
                    drawRoundedRectangle(40, 140, 140, 185, RGB(247, 64, 43), 255);
                    swprintf(opt, 179, L"%ls", lan.get("alarm", "connected_sensor"));
                    drawText(opt, 40, 147, 100, 1, 0, 30.0f, 65535, 1);
                    waitForPenUp();
                    drawRoundedRectangle(40, 140, 140, 185, RGB(255, 0, 0), 255);
                    swprintf(opt, 179, L"%ls", lan.get("alarm", "connected_sensor"));
                    drawText(opt, 40, 147, 100, 1, 0, 30.0f, 65535, 1);
                    LOG(Logger::PRINT, "Sending ALARM Signal....");
//                    switchOn_onTouch();
                    connectedHomeSetValue(1, "true");
                } else if (x > 180 && y > 140 && x < 280 && y < 185) {//alarm
                    drawRoundedRectangle(180, 140, 280, 185, RGB(5, 250, 83), 255);
                    swprintf(opt, 179, L"%ls", lan.get("off_1", "common"));
                    drawText(opt, 180, 147, 100, 1, 0, 30.0f, 65535, 1);
                    waitForPenUp();
                    drawRoundedRectangle(180, 140, 280, 185, GREEN_COLOR, 255);
                    swprintf(opt, 179, L"%ls", lan.get("off_1", "common"));
                    drawText(opt, 180, 147, 100, 1, 0, 30.0f, 65535, 1);
                    LOG(Logger::PRINT, "Sending OFF Signal....");
//                    switchOn_offTouch();
                    connectedHomeSetValue(1, "false");
                }
            }
                break;


            case ZWtoACIRExtender://newal2 touch
            {
                int SetTemp = 0;
                
                Device *d = getDevice(contDevID);
                if (x > 240 && y > 60 && x < 280 && y < 75) {
                    waitForPenUp();
                    getBatteryVal();
                    return;
                } else if (x > 210 && y > 90 && x < 300 && y < 125) {
                    waitForPenUp();
                    fillRect(210, 95, 300, 125, GREEN_COLOR);
                    convertTemperature(1, opt, true);
                    drawText(opt, 200, 100, 100, 1, 0, 20.0f, 65535, 1);
                } else if (x > 70 && y > 160 && x < 292 && y < 184) { //temp set
                    if (!strcmp(d->getValue(2), "Cool") || !strcmp(d->getValue(2), "Heat")) {//newal3
                        while (x > 74 && y > 160 && x < 288 && y < 184) {
                            if (x > (78) && x < (288)) {
                                fillRect(70, 160, 296, 184, RGB(23, 191, 227));
                                drawLine(74, 171, 292, 171, 65535);
                                drawLine(74, 167, 74, 175, 65535);
                                drawLine(292, 167, 292, 175, 65535);
                                fillCircle(x, 171, 7, 65535);
                                SetTemp = x - 72;
                            }
                            usleep(90000);
                            x = readX();
                            y = readY();
                        }
                        SetTemp = ((((SetTemp) / 14) + 16))*9.0 / 5+32;
                        if (!strcmp(d->getValue(2), "Heat")) {
//                            setThermoHeatCurrLevel(((SetTemp) / 14) + 16);
                            connectedHomeSetValue(3, SetTemp);
                        } else {
//                            setThermoCoolCurrLevel(((SetTemp) / 14) + 16);
                            connectedHomeSetValue(4, SetTemp);
                        }
                    }
                } else if ((x > 70 && y > 130 && x < 95 && y < 155) || (x > 190 && y > 130 && x < 215 && y < 155)) {//for mode
                    int modelocalflag = 0;
                    while ((x > 70 && y > 130 && x < 95 && y < 155) || (x > 190 && y > 130 && x < 215 && y < 155)) {
                        if ((x > 70 && y < 155) || (x > 190 && y < 155)) {
                            fillRect(97, 130, 187, 155, BUTTON_LAYER);

                            if (x > 70 && y > 130 && x < 95 && y < 155) {//Minus Arrow
                                AcIrFlag--;
                                if (AcIrFlag == 0) {
                                    AcIrFlag = 8;
                                }
                            } else if (x > 190 && y > 130 && x < 215 && y < 155) {//Plus Arrow
                                AcIrFlag++;
                                if (AcIrFlag == 9) {
                                    AcIrFlag = 1;
                                }
                            }

                            if (AcIrFlag == 1) {
                                drawText(lan.get("auto", "connected_sensor"), 105, 135, 80, 1, 0, 20.0f, 65535, 1);
                                modelocalflag = 1;
                                if (CheckIrMode == 1) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (AcIrFlag == 2) {
                                drawText(lan.get("cool", "connected_sensor"), 105, 135, 80, 1, 0, 20.0f, 65535, 1);
                                modelocalflag = 2;
                                if (CheckIrMode == 2) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (AcIrFlag == 3) {
                                drawText(lan.get("heat", "connected_sensor"), 105, 135, 80, 1, 0, 20.0f, 65535, 1);
                                modelocalflag = 3;
                                if (CheckIrMode == 3) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (AcIrFlag == 4) {
                                drawText(L"Changeover", 103, 135, 80, 1, 0, 15.0f, 65535, 1);
                                modelocalflag = 4;
                                if (CheckIrMode == 4) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (AcIrFlag == 5) {
                                drawText(L"Off", 105, 135, 80, 1, 0, 20.0f, 65535, 1);
                                modelocalflag = 5;
                                if (CheckIrMode == 5) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (AcIrFlag == 6) {
                                drawText(L"Resume", 105, 135, 80, 1, 0, 20.0f, 65535, 1);
                                modelocalflag = 6;
                                if (CheckIrMode == 6) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (AcIrFlag == 7) {
                                drawText(L"Fan Only", 105, 135, 80, 1, 0, 20.0f, 65535, 1);
                                modelocalflag = 7;
                                if (CheckIrMode == 7) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (AcIrFlag == 8) {
                                drawText(L"Dry Air", 105, 135, 80, 1, 0, 20.0f, 65535, 1);
                                modelocalflag = 8;
                                if (CheckIrMode == 8) {
                                    pngImg.drawPNG(103, 132, 1, BACKGROUND_LAYER, Tick);
                                }
                            }
                        }
                        usleep(200000);
                        x = readX();
                        y = readY();
                    }
                    if (modelocalflag == 1) {
//                        setThermostatMode("Auto");
                        connectedHomeSetValue(2, "Auto");
                    } else if (modelocalflag == 2) {
//                        setThermostatMode("Cool");
                        connectedHomeSetValue(2, "Cool");
                    } else if (modelocalflag == 3) {
//                        setThermostatMode("Heat");
                        connectedHomeSetValue(2, "Heat");
                    } else if (modelocalflag == 4) {
//                        setThermostatMode("Auto Changeover");
                        connectedHomeSetValue(2, "Auto Changeover");
                    } else if (modelocalflag == 5) {
//                        setThermostatMode("Off");
                        connectedHomeSetValue(2, "Off");
                    } else if (modelocalflag == 6) {
//                        setThermostatMode("Resume");
                        connectedHomeSetValue(2, "Resume");
                    } else if (modelocalflag == 7) {
//                        setThermostatMode("Fan Only");
                        connectedHomeSetValue(2, "Fan Only");
                    } else if (modelocalflag == 8) {
//                        setThermostatMode("Dry Air");
                        connectedHomeSetValue(2, "Dry Air");
                    }
                } else if ((x > 190 && y > 190 && x < 215 && y < 215) || (x > 70 && y > 190 && x < 95 && y < 215)) { //for plus Arrow fan mode
                    while ((x > 190 && y > 190 && x < 215 && y < 215) || (x > 70 && y > 190 && x < 95 && y < 215)) {
                        int localflag = 0;
                        if ((x > 190 && y < 215) || (x > 70 && y < 215)) {
                            fillRect(97, 190, 187, 215, RGB(23, 191, 227));

                            if (x > 70 && y > 190 && x < 95 && y < 215) {
                                Acflag--;
                                if (Acflag < 1) {
                                    Acflag = 4;
                                }
                            } else {
                                Acflag++;
                                if (Acflag > 4) {
                                    Acflag = 1;
                                }
                            }
                            if (Acflag == 1) {
                                drawText(lan.get("auto", "connected_sensor"), 107, 195, 70, 1, 0, 20.0f, 65535, 1);
                                localflag = 1;
                                if (CheckAcFan == 1) {
                                    pngImg.drawPNG(100, 195, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (Acflag == 2) {
                                drawText(L"Low", 107, 195, 70, 1, 0, 20.0f, 65535, 1);
                                localflag = 2;
                                if (CheckAcFan == 2) {
                                    pngImg.drawPNG(100, 195, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (Acflag == 3) {
                                //drawText(lan.get("medium", "connected_sensor"), 105, 200, 70, 1, 0, 17.0f, 65535, 1);
                                drawText(L"Medium", 107, 195, 70, 1, 0, 20.0f, 65535, 1);
                                localflag = 3;
                                if (CheckAcFan == 3) {
                                    pngImg.drawPNG(100, 195, 1, BACKGROUND_LAYER, Tick);
                                }
                            } else if (Acflag == 4) {
                                drawText(L"High", 107, 195, 70, 1, 0, 20.0f, 65535, 1);
                                localflag = 4;
                                if (CheckAcFan == 4) {
                                    pngImg.drawPNG(100, 195, 1, BACKGROUND_LAYER, Tick);
                                }
                            }

                        }//if
                        usleep(150000);
                        x = readX();
                        y = readY();
                        if (localflag == 1) {
//                            setThermostatFanMode("Auto Low");
                            connectedHomeSetValue(5, "Auto Low");
                        } else if (localflag == 2) {
//                            setThermostatFanMode("On Low");
                            connectedHomeSetValue(5, "On Low");
                        } else if (localflag == 3) {
//                            setThermostatFanMode("Unknown 5");
                            connectedHomeSetValue(5, "Unknown 5");
                        } else if (localflag == 4) {
//                            setThermostatFanMode("On High");
                            connectedHomeSetValue(5, "On High");
                        }
                    }//while
                } else if (x > 220 && x < 300 && y > 130 && y < 155) { //Swing
                    fillRect(220, 130, 300, 155, RGB(12, 106, 246)); //swing 
                    if (atoi(d->getValue(8)) == 0) {
                        //drawText(lan.get("swing_off", "connected_sensor"), 220, 135, 80, 1, 0, 20.0f, 65535, 1);
                        drawText(L"Swing Off", 220, 135, 80, 1, 0, 20.0f, 65535, 1);
                    } else if (atoi(d->getValue(8)) == 1) {
                        // drawText(lan.get("swing_on", "connected_sensor"),  220, 135, 80, 1, 0, 20.0f, 65535, 1);
                        drawText(L"Swing On", 220, 135, 80, 1, 0, 20.0f, 65535, 1);
                    }
                    waitForPenUp();
                    fillRect(220, 130, 300, 155, BUTTON_LAYER); //swing 
                    if (atoi(d->getValue(8)) == 0) {
                        //drawText(lan.get("swing_off", "connected_sensor"), 220, 135, 80, 1, 0, 20.0f, 65535, 1);
                        drawText(L"Swing Off", 220, 135, 80, 1, 0, 20.0f, 65535, 1);
                        connectedHomeSetValue(8, "1");
                    } else if (atoi(d->getValue(8)) == 1) {
                        // drawText(lan.get("swing_on", "connected_sensor"),  220, 135, 80, 1, 0, 20.0f, 65535, 1);
                        drawText(L"Swing On", 220, 135, 80, 1, 0, 20.0f, 65535, 1);
                        connectedHomeSetValue(8, "0");
                    }
                } else if (x > 70 && x < 115 && y > 95 && y < 125) { //Power
                    fillRect(70, 95, 115, 125, RGB(12, 106, 246));
                    if (atoi(d->getValue(9)) == 0) {
                        drawText(lan.get("off_1", "common"), 70, 100, 50, 1, 0, 20.0f, 65535, 1);
                    } else {
                        drawText(lan.get("on_1", "common"), 70, 100, 50, 1, 0, 20.0f, 65535, 1);
                    }
                    waitForPenUp();
                    fillRect(70, 95, 115, 125, BUTTON_LAYER);
                    if (atoi(d->getValue(9)) == 0) {
                        drawText(lan.get("off_1", "common"), 70, 100, 50, 1, 0, 20.0f, 65535, 1);
//                        basicSetValue(255);
                        connectedHomeSetValue(9, 255);
                    } else {
                        drawText(lan.get("on_1", "common"), 70, 100, 50, 1, 0, 20.0f, 65535, 1);
//                        basicSetValue(0);
                        connectedHomeSetValue(9, 0);
                    }
                    waitForPenUp();
                } else if (ConfigurationButton.checkTouch(x, y)) {
                    return;
                }

            }
                break;

            case SetPointThermostat:
            {
                int er;
                double temp = 0.0;
                char output[180];
                Device *d = getDevice(contDevID);
                if (x > 240 && y > 60 && x < 280 && y < 75) {//battery
                    waitForPenUp();
                    getBatteryVal();
                    return;
                } else if (x > 70 && x < 100 && y > 140 && y < 165 && ((format == FORMAT_F && SetpointTmp >= 43) || (format == FORMAT_C && SetpointTmp >= 6))) {//-arrow
                    waitForPenUp();
                    SetpointTmp--;
                    if (format == FORMAT_C) {
                        sprintf(output, "   %.2lf Â°C", SetpointTmp);
                    } else {
                        sprintf(output, "   %.2lf Â°F", SetpointTmp);
                    }
                    utf8_to_wchar(output, strlen(output), opt, strlen(output), UTF8_IGNORE_ERROR);
                    TempBox.setText(opt);
                    TempBox.draw();
                    if (format == FORMAT_C) {
//                        er = (tmpd *9)/5.0 + 32 ;
                        temp = ((((SetpointTmp *9)) / 5.0) + 32);
                        temp = ceil(temp);
                    } else {
                        temp = SetpointTmp;
                    }
                    er = (int) temp;
//                    setThermoHeatCurrLevel(er);
                    connectedHomeSetValue(1, er);
                } else if (x > 185 && x < 208 && y > 140 && y < 165 && ((format == FORMAT_F && SetpointTmp <= 103) || (format == FORMAT_C && SetpointTmp <= 39))) {//+arrow
                    waitForPenUp();
                    SetpointTmp++;
                    if (format == FORMAT_C) {
                        sprintf(output, "   %.2lf Â°C", SetpointTmp);
                    } else {
                        sprintf(output, "   %.2lf Â°F", SetpointTmp);
                    }
                    utf8_to_wchar(output, strlen(output), opt, strlen(output), UTF8_IGNORE_ERROR);
                    TempBox.setText(opt);
                    TempBox.draw();
                    if (format == FORMAT_C) {
                        temp = ((((SetpointTmp *9)) / 5.0) + 32);
                    } else {
                        temp = SetpointTmp;
                    }
                    er = (int) temp;
//                    setThermoHeatCurrLevel(er);
                    connectedHomeSetValue(1, er);
                } else if (x > 80 && x < 140 && y > 190 && y < 220) {//econ on touch
                    if (strcmp(d->getValue(5), "#ERR")) {
                        HeatModeButton.draw();
                        pngImg.drawPNG(85, 195, 1, BACKGROUND_LAYER, Tick);
                        waitForPenUp();
//                        EconModeButton_onTouch();
                        connectedHomeSetValue(5, "Heat Econ");
                    } else {
                        return;
                    }
                } else if (x > 150 && x < 210 && y > 190 && y < 220) {//heaton
                    if (strcmp(d->getValue(5), "#ERR")) {
                        EconModeButton.draw();
                        pngImg.drawPNG(153, 195, 1, BACKGROUND_LAYER, Tick);
                        waitForPenUp();
//                        HeatModeButton_onTouch();
                        connectedHomeSetValue(5, "Heat");
                    } else {
                        return;
                    }
                } else if (x > 100 && x < 178 && y > 140 && y < 165) {//tempbox
                    TempBox.checkTouch(x, y);
                }
                if (x > 190 && y > 95 && x < 300 && y < 125) {//temperature
                    char ss[180];
                    waitForPenUp();
                    //fillRect(190, 95, 300, 125, GREEN_COLOR);
                    fillRect(210, 95, 300, 125, GREEN_COLOR);
                    if (format == FORMAT_F) {
                        if (strcmp(d->getValue(5), "#ERR")) {
                            if (!strcmp(d->getValue(5), "Heat Econ")) {
                                SetpointTmp = (atoi(d->getValue(6)) - 32)*5.0 / 9;
                                SetpointTmp = ceil(SetpointTmp);
                                sprintf(ss, "   %.2lf Â°C", SetpointTmp);
                            } else {
                                SetpointTmp = (atoi(d->getValue(1)) - 32)*5.0 / 9;
                                SetpointTmp = ceil(SetpointTmp);
                                sprintf(ss, " %.2lf Â°C", SetpointTmp);
                            }
                        } else {
                            SetpointTmp = (atoi(d->getValue(1)) - 32)*5.0 / 9;
                            SetpointTmp = ceil(SetpointTmp);
                            sprintf(ss, "   %.2lf Â°C", SetpointTmp);
                        }
                        utf8_to_wchar(ss, strlen(ss), opt, strlen(ss), UTF8_IGNORE_ERROR);
                        TempBox.setText(opt);
                        TempBox.draw();

                        //fillRect(190, 95, 300, 125, GREEN_COLOR);
                        convertTemperature(4, opt, true);
                        // drawText(opt, 200, 93, 100, 1, 0, 25.0f, 65535, 1);
                        drawText(opt, 200, 100, 100, 1, 0, 25.0f, 65535, 1);
                    } else {
                        convertTemperature(4, opt, true);
                        //drawText(opt, 200, 93, 100, 1, 0, 25.0f, 65535, 1);
                        drawText(opt, 200, 100, 100, 1, 0, 25.0f, 65535, 1);

                        if (strcmp(d->getValue(5), "#ERR")) {
                            if (!strcmp(d->getValue(5), "Heat Econ")) {
                                SetpointTmp = getTempinFloat(d->getValue(6));
                                sprintf(ss, "   %.2lf Â°F", SetpointTmp);
                                //sprintf(output, "   %s Â°F",  d->getValue(6));
                            } else {
                                SetpointTmp = getTempinFloat(d->getValue(1));
                                sprintf(ss, "   %.2lf Â°F", SetpointTmp);
                                //sprintf(output, "   %s Â°F",  d->getValue(1));
                            }
                        } else {
                            SetpointTmp = getTempinFloat(d->getValue(1));
                            sprintf(ss, "   %.2lf Â°F", SetpointTmp);
                            //sprintf(output, "   %s Â°F",  d->getValue(6));
                        }
                        utf8_to_wchar(ss, strlen(ss), opt, strlen(ss), UTF8_IGNORE_ERROR);
                        TempBox.setText(opt);
                        TempBox.draw();
                    }

                }

            }
                break;
            case HueLamp:
            {

                Device *d = getDevice(contDevID);
                if (x > 25 + 10 && y > RECT_Y && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT) {
                    while (x > 25 + 10 && y > RECT_Y && x < 301 - 10 && y < RECT_Y + RECT_HEIGHT) {
                        if (x > 301 - 10) {
                            fillRect(25 + 6, RECT_Y, 301 - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(301 - 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 255;
                        } else if (x < RECT_X) {
                            fillRect(25 + 6, RECT_Y, RECT_X + RECT_WIDTH - 6, 301, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(25 + 10, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = 0;
                        } else {
                            fillRect(25 + 6, RECT_Y, 301 - 6, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            fillCircle(x, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            dimmerCurrLevel = (x - (25 + 10));
                        }

                        usleep(90000);
                        x = readX();
                        y = readY();
                    }
                    connectedHomeSetValue(5, dimmerCurrLevel);
                } else if (x > 25 && y > RECT_Y + 38 && x < 280 && y < RECT_Y + RECT_HEIGHT + 38) {
                    int newCol;
                    while (x >= 25 && y >= RECT_Y + 38 && x <= 301 - 10 && y <= RECT_Y + RECT_HEIGHT + 38) {
                        pngImg.drawPNG(25, RECT_Y + 38, 1, 0, color_png);
                        fillRect(280, RECT_Y + 38, 300, 187, RGB(255, 255, 255));
                        drawLine(x - 2, RECT_Y + 38, x - 2, RECT_Y + 42 + RECT_HEIGHT, 0);
                        newCol = getColorFromScreen(x, y);
                        x = readX();
                        y = readY();
                        usleep(90000);
                    }
                    if (strstr(d->getValue(2), "true")) {
                        d->setColorBulb(newCol);
                    }
                }
                if (x > 280 && x < 300 && y > RECT_Y + 38 && y < RECT_Y + RECT_HEIGHT + 38) {
                    waitForPenUp();
                    pngImg.drawPNG(25, RECT_Y + 38, 1, 0, color_png);
                    fillRect(280, RECT_Y + 38, 300, 187, RGB(255, 255, 255));
                    drawLine(x - 2, RECT_Y + 38, x - 2, RECT_Y + 42 + RECT_HEIGHT, 0);
//                    setbulbsaturation(0);
                    connectedHomeSetValue(4, "0");
                }
                colorOnButton.checkTouch(x, y);
                colorOffButton.checkTouch(x, y);
                settingsButton.checkTouch(x, y);
            }
                break;
            case NestThermostat:
            {
                Device *d = getDevice(contDevID);
                double er;
                int xlow, xhigh;
                er = getTempinFloat(d->getValue(5));
                xlow = thermoCool = (int) er;
                er = getTempinFloat(d->getValue(6));
                xhigh = thermoHeat = (int) er;
                strcpy(thermoMode, d->getValue(2));
                strcpy(thermoState, d->getValue(11));
                strcpy(thermoaway, d->getValue(8));
                strcpy(thermounit, d->getValue(7));
                strcpy(thermoFanState, d->getValue(9));
                thermoCoolCurrLevel = (thermoCool - 50)*6 + 55;
                thermoHeatCurrLevel = (thermoHeat - 50)*6 + 55;

                if (!strcmp(d->getValue(11), "true")) {
                    if (x > 235 && y > 97 && x < 303 && y < 125) { // current temp mode
                        waitForPenUp();
                        if (!strcmp(thermoState, "true")) {
                            fillRect(235, 97, 303, 125, GREEN_COLOR);
                            convertTemperature(10, opt, true);
                            drawText(opt, 245, 97 + 6, 60, 1, 0, 18.0f, 65535, 0);
                        }
                    }

                    if (strcmp(d->getValue(14), "true")) { // check if IS_USING_EMERGENCY_HEAT is not true
                        if (!strcmp(d->getValue(8), "home")) {
                            if ((!strcmp(d->getValue(12), "true")) && (!strcmp(d->getValue(13), "true"))) {
                                if (x > 55 && x < 123 && y > 97 && y < 125) { //heat-cool mode
                                    fillRect(55, 97, 123, 125, RGB(23, 191, 227));
                                    fillRect(127, 97, 177, 125, BUTTON_LAYER);
                                    fillRect(181, 97, 231, 125, BUTTON_LAYER);
                                    drawText(L"Heat-Cool", 70, 105, 50, 1, 0, 13.0f, 65535, 1);
                                    drawText(lan.get("cool", "connected_sensor"), 132, 105, 50, 1, 0, 13.0f, 65535, 1);
                                    drawText(lan.get("heat", "connected_sensor"), 186, 105, 50, 1, 0, 13.0f, 65535, 1);
//                                    setThermostatMode("heat-cool");
                                    connectedHomeSetValue(2, "heat-cool");
                                    pngImg.drawPNG(57, 105, 1, BACKGROUND_LAYER, Tick);
                                    waitForPenUp();
                                }

                            }
                            if (!strcmp(d->getValue(12), "true")) {
                                if (x > 127 && x < 177 && y > 97 && y < 125) { //cool mode
                                    if (!strcmp(d->getValue(13), "true")) {
                                        fillRect(55, 97, 123, 125, BUTTON_LAYER);
                                        fillRect(181, 97, 231, 125, BUTTON_LAYER);
                                        drawText(L"Heat-Cool", 70, 105, 50, 1, 0, 13.0f, 65535, 1);
                                        drawText(lan.get("heat", "connected_sensor"), 186, 105, 50, 1, 0, 13.0f, 65535, 1);
                                    }
                                    fillRect(127, 97, 177, 125, RGB(23, 191, 227));
                                    drawText(lan.get("cool", "connected_sensor"), 132, 105, 50, 1, 0, 13.0f, 65535, 1);
//                                    setThermostatMode("cool");
                                    connectedHomeSetValue(2, "cool");
                                    pngImg.drawPNG(129, 105, 1, BACKGROUND_LAYER, Tick);
                                    waitForPenUp();
                                }

                            }
                            if (!strcmp(d->getValue(13), "true")) {
                                if (x > 181 && x < 231 && y > 97 && y < 125) { //heat mode
                                    if (!strcmp(d->getValue(12), "true")) {
                                        fillRect(55, 97, 123, 125, BUTTON_LAYER);
                                        fillRect(127, 97, 177, 125, BUTTON_LAYER);
                                        drawText(L"Heat-Cool", 70, 105, 50, 1, 0, 13.0f, 65535, 1);
                                        drawText(lan.get("cool", "connected_sensor"), 132, 105, 50, 1, 0, 13.0f, 65535, 1);
                                    }
                                    fillRect(181, 97, 231, 125, RGB(23, 191, 227));
                                    drawText(lan.get("heat", "connected_sensor"), 186, 105, 50, 1, 0, 13.0f, 65535, 1);
//                                    setThermostatMode("heat");
                                    connectedHomeSetValue(2, "heat");
                                    pngImg.drawPNG(183, 105, 1, BACKGROUND_LAYER, Tick);
                                    waitForPenUp();
                                }
                            }
                        }
                    } else {
                    }


                    if (!strcmp(d->getValue(8), "home")) {
                        if (!strcmp(d->getValue(2), "heat-cool")) {
                            if (!strcmp(d->getValue(13), "true") && !strcmp(d->getValue(12), "true")) {
                                if (x >= 59 && y > 130 && x < 298 && y < 155) {//cool slider
                                    while (x >= 59 && y > 130 && x < 298 && y < 155) {
                                        //if ((thermoHeatCurrLevel / 6 + 50 + 3) <= thermoHeat) {
                                        if (!strcasecmp("C", d->getValue(7))) {
                                            thermoHeatCurrLevel = x - 59;
                                            xlow = (thermoHeatCurrLevel / 5.6) + 48;
                                        } else {
                                            thermoHeatCurrLevel = x - 55;
                                            xlow = thermoHeatCurrLevel / 6 + 50;
                                        }
                                        if (xlow + 3 <= thermoHeat) {
                                            fillRect(THERMO_COOL_X - 5, THERMO_COOL_Y, 303, 155, RGB(23, 191, 227));
                                            drawLine(THERMO_COOL_X, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 298, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 65535);
                                            drawLine(THERMO_COOL_X, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 3), THERMO_COOL_X, THERMO_COOL_Y + ((THERMO_COOL_HEIGHT * 2) / 3), 65535);
                                            drawLine(THERMO_COOL_X + THERMO_COOL_WIDTH - 5 + 43, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 3), THERMO_COOL_X + THERMO_COOL_WIDTH - 5 + 43, THERMO_COOL_Y + ((THERMO_COOL_HEIGHT * 2) / 3), 65535);
                                            fillCircle(x, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 5, 65535);
                                            format = (format == FORMAT_C) ? FORMAT_C : FORMAT_F;
                                            if (format == FORMAT_F) {
                                                swprintf(opt, 20, L" %d", xlow);
                                                drawText(opt, x - 20, 128, 40, 1, 0, 14.0f, 65535, 1);
                                            } else {
                                                int celcius = (int) (((xlow - 32)*5.0) / 9);
                                                swprintf(opt, 20, L" %d", celcius);
                                                drawText(opt, x - 20, 128, 40, 1, 0, 14.0f, 65535, 1);
                                            }
                                            //}                        
                                        }
                                        usleep(90000);
                                        x = readX();
                                        y = readY();
                                    }
                                    char temp[10];
                                    int i = xlow;
                                    sprintf(temp, "%d", i);
                                    connectedHomeSetValue(5, temp);
                                } else if (x >= 59 && y > 160 && x < 298 && y < 185) {//heat slider
                                    while (x >= 59 && y > 160 && x < 298 && y < 185) {
                                        if (!strcasecmp("C", d->getValue(7))) {
                                            thermoHeatCurrLevel = x - 59;
                                            xhigh = (thermoHeatCurrLevel / 5.6) + 48;
                                        } else {
                                            thermoHeatCurrLevel = x - 55;
                                            xhigh = thermoHeatCurrLevel / 6 + 50;
                                        }
                                        if (xhigh - 3 > thermoCool) {
                                            fillRect(THERMO_HEAT_X - 5, THERMO_HEAT_Y, THERMO_HEAT_X + THERMO_HEAT_WIDTH + 43, THERMO_HEAT_Y + THERMO_HEAT_HEIGHT, RGB(23, 191, 227));
                                            drawLine(THERMO_HEAT_X, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5 + 43, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 65535);
                                            drawLine(THERMO_HEAT_X, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 3), THERMO_HEAT_X, THERMO_HEAT_Y + ((THERMO_HEAT_HEIGHT * 2) / 3), 65535);
                                            drawLine(THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5 + 43, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 3), THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5 + 43, THERMO_HEAT_Y + ((THERMO_HEAT_HEIGHT * 2) / 3), 65535);
                                            fillCircle(x, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 5, 65535);
                                            format = (format == FORMAT_C) ? FORMAT_C : FORMAT_F;
                                            if (format == FORMAT_F) {
                                                swprintf(opt, 20, L" %d", xhigh);
                                                drawText(opt, x - 20, 158, 40, 1, 0, 14.0f, 65535, 1);
                                            } else {
                                                int celcius = (int) (((xhigh - 32)*5.0) / 9);
                                                swprintf(opt, 20, L" %d", celcius);
                                                drawText(opt, x - 20, 158, 40, 1, 0, 14.0f, 65535, 1);
                                            }
                                        }
                                        usleep(90000);
                                        x = readX();
                                        y = readY();
                                    }


                                    char temp[10];
                                    int i = xhigh;
                                    sprintf(temp, "%d", i);
                                    connectedHomeSetValue(6, temp);
                                }
                            }
                        } else if (!strcmp(d->getValue(2), "heat")) {
                            if (!strcmp(d->getValue(13), "true")) {
                                if (x >= 59 && y > 160 && x < 298 && y < 185) {//heat slider
                                    while (x >= 59 && y > 160 && x < 298 && y < 185) {
                                        fillRect(THERMO_HEAT_X - 5, THERMO_HEAT_Y, THERMO_HEAT_X + THERMO_HEAT_WIDTH + 43, THERMO_HEAT_Y + THERMO_HEAT_HEIGHT, RGB(23, 191, 227));
                                        drawLine(THERMO_HEAT_X, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5 + 43, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 65535);
                                        drawLine(THERMO_HEAT_X, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 3), THERMO_HEAT_X, THERMO_HEAT_Y + ((THERMO_HEAT_HEIGHT * 2) / 3), 65535);
                                        drawLine(THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5 + 43, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 3), THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5 + 43, THERMO_HEAT_Y + ((THERMO_HEAT_HEIGHT * 2) / 3), 65535);
                                        fillCircle(x, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 5, 65535);
                                        if (!strcasecmp("C", d->getValue(7))) {
                                            thermoHeatCurrLevel = x - 59;
                                            xhigh = (thermoHeatCurrLevel / 5.6) + 48;
                                            sprintf(t_temp, "%d %d %d\n", thermoHeatCurrLevel, xhigh, (thermoHeatCurrLevel / 5.6));
                                            LOG(Logger::INFO, t_temp);
                                        } else {
                                            thermoHeatCurrLevel = x - 55;
                                            xhigh = (thermoHeatCurrLevel / 6) + 50;
                                        }

                                        format = (format == FORMAT_C) ? FORMAT_C : FORMAT_F;
                                        if (format == FORMAT_F) {
                                            swprintf(opt, 20, L" %d", xhigh);
                                            drawText(opt, x - 20, 158, 40, 1, 0, 14.0f, 65535, 1);
                                        } else {
                                            int celcius = (int) (((xhigh - 32)*5.0) / 9);
                                            swprintf(opt, 20, L" %d", celcius);
                                            drawText(opt, x - 20, 158, 40, 1, 0, 14.0f, 65535, 1);
                                        }

                                        usleep(90000);
                                        x = readX();
                                        y = readY();
                                    }
                                    char temp[10];
                                    int i = xhigh;
                                    sprintf(temp, "%d", i);
                                    connectedHomeSetValue(3, temp);
                                }
                            }
                        } else if (!strcmp(d->getValue(2), "cool")) {
                            if (!strcmp(d->getValue(12), "true")) {
                                if (x >= 59 && y > 130 && x < 298 && y < 155) {//cool slider
                                    while (x >= 59 && y > 130 && x < 298 && y < 155) {
                                        fillRect(THERMO_COOL_X - 5, THERMO_COOL_Y, 303, 155, RGB(23, 191, 227));
                                        drawLine(THERMO_COOL_X, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 298, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 65535);
                                        drawLine(THERMO_COOL_X, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 3), THERMO_COOL_X, THERMO_COOL_Y + ((THERMO_COOL_HEIGHT * 2) / 3), 65535);
                                        drawLine(THERMO_COOL_X + THERMO_COOL_WIDTH - 5 + 43, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 3), THERMO_COOL_X + THERMO_COOL_WIDTH - 5 + 43, THERMO_COOL_Y + ((THERMO_COOL_HEIGHT * 2) / 3), 65535);
                                        fillCircle(x, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 5, 65535);
                                        if (!strcasecmp("C", d->getValue(7))) {
                                            thermoHeatCurrLevel = x - 59;
                                            xlow = (thermoHeatCurrLevel / 5.6) + 48;
                                        } else {
                                            thermoHeatCurrLevel = x - 55;
                                            xlow = thermoHeatCurrLevel / 6 + 50;
                                        }
                                        format = (format == FORMAT_C) ? FORMAT_C : FORMAT_F;
                                        if (format == FORMAT_F) {
                                            swprintf(opt, 20, L" %d", xlow);
                                            drawText(opt, x - 20, 128, 40, 1, 0, 14.0f, 65535, 1);
                                        } else {
                                            int celcius = (int) (((xlow - 32)*5.0) / 9);
                                            swprintf(opt, 20, L" %d", celcius);
                                            drawText(opt, x - 20, 128, 40, 1, 0, 14.0f, 65535, 1);
                                        }

                                        usleep(90000);
                                        x = readX();
                                        y = readY();
                                    }

                                    char temp[10];
                                    int i = xlow;
                                    sprintf(temp, "%d", i);
                                    connectedHomeSetValue(3, temp);
                                }
                            }
                        }
                        if (!strcmp(d->getValue(15), "true") && strcmp(d->getValue(2), "off")) { // check if has_fan is true or not
                            if (x > 138 && x < 219 && y > 190 && y < 220) { //fan state
                                fillRect(138, 190, 219, 220, BUTTON_LAYER);
                                pngImg.drawPNG(143, 195, 1, BACKGROUND_LAYER, fanImage);
                                if (!strcmp(thermoFanState, "false")) {
                                    drawText(L" : Start", 165, 196, 60, 1, 0, 18.0f, 65535, 0);
                                    connectedHomeSetValue(9, "true");
                                } else if (!strcmp(thermoFanState, "true")) {
                                    drawText(L" : Stop", 165, 196, 60, 1, 0, 18.0f, 65535, 0);
                                    connectedHomeSetValue(9, "false");
                                }
                                waitForPenUp();
                            }
                        }
                    }

                    if (x > THERMO_HEAT_X - 5 && x < 136 && y > 190 && y < 220) { //away
                        fillRect(THERMO_HEAT_X - 5, 190, 136, 220, (strcmp(thermoaway, "away")) ? BUTTON_LAYER : RGB(23, 191, 227));
                        if (!strcmp(thermoaway, "away")) {
                            drawText(L"Home", THERMO_HEAT_X + 5, 198, 50, 1, 0, 18.0f, 65535, 1);
                            connectedHomeSetValue(8, "home");
                        } else if (!strcmp(thermoaway, "home")) {
                            drawText(L"Away", THERMO_HEAT_X + 5, 198, 50, 1, 0, 18.0f, 65535, 1);
                            connectedHomeSetValue(8, "away");
                        } else if (!strcmp(thermoaway, "auto-away")) {
                            drawText(L"Auto-Away", THERMO_HEAT_X + 5, 198, 50, 1, 0, 16.0f, 65535, 1);
                            connectedHomeSetValue(8, "home");
                        } else if (!strcmp(thermoaway, "unknown")) {
                            drawText(L"Unknown", THERMO_HEAT_X + 5, 198, 50, 1, 0, 18.0f, 65535, 1);
                            connectedHomeSetValue(8, "home");
                        }
                        waitForPenUp();
                    }
                }//printf("\nLINE = %d, %s\n", __LINE__, thermoFanState);

            }
                break;
            case NestSmokeDetector:
            {

            }
                break;
            case AlmondSiren:
            {
                if (AlarmButton.checkTouch(x, y)) {
                    checkRadioButtonState(1, TONE_SECTION);
                    return;
                } else if (SirenButton.checkTouch(x, y)) {
                    checkRadioButtonState(2, TONE_SECTION);
                    return;
                } else if (DoorBellButton.checkTouch(x, y)) {
                    checkRadioButtonState(3, TONE_SECTION);
                    return;
                } else if (x > 20 && x < 100 && y > 185 && y < 215) {
                    fillRect(20, 185, 100, 215, BUTTON_LAYER_ONTOUCH);
                    if (StartSiren == false) {
                        drawText(L"Ring", 20, 191, 80, 1, 0, 18.0f, 65535, 1);
                        waitForPenUp();
                        fillRect(20, 185, 100, 215, RGB(23, 191, 227));
                        drawText(L"Ring", 20, 191, 80, 1, 0, 18.0f, 65535, 1);
//                        StartStopSiren_onTouch(true);
                        connectedHomeSetValue(2, "true");
                        //StartSiren = true;
                    } else {
                        drawText(L"Stop", 20, 191, 80, 1, 0, 18.0f, 65535, 1);
                        waitForPenUp();
                        fillRect(20, 185, 100, 215, RGB(23, 191, 227));
                        drawText(L"Stop", 20, 191, 80, 1, 0, 18.0f, 65535, 1);
//                        StartStopSiren_onTouch(false);
                        connectedHomeSetValue(2, "false");
                        // StartSiren = false;
                    }
                } else if (AlmondTimer.checkTouch(x, y)) {
                    return;
                } else if (LowVolume.checkTouch(x, y)) {
                    checkRadioButtonState(1, VOLUME_SECTION);
                    //                    checkSirenEnableState();
                    return;
                } else if (MedVolume.checkTouch(x, y)) {
                    checkRadioButtonState(2, VOLUME_SECTION);
                    //                    checkSirenEnableState();
                    return;
                } else if (HighVolume.checkTouch(x, y)) {
                    checkRadioButtonState(3, VOLUME_SECTION);
                    return;
                }
            }
                break;

            case AlmondBlink:
            {
                Device d(contDevID);
                if (x > 25 && x < 125 && y > 145 && y < 175) {
                    fillRect(25, 145, 125, 175, BUTTON_LAYER_ONTOUCH);
                    drawText(L"Brightness", 25, 151, 100, 1, 0, 18.0f, 65535, 1);
                    waitForPenUp();
                    fillRect(25, 145, 125, 175, RGB(23, 191, 227));
                    drawText(L"Brightness", 25, 151, 100, 1, 0, 18.0f, 65535, 1);
                    drawAlmondBlinkColorStrip();
                } else if (AlmondLedTimer.checkTouch(x, y)) {
                    return;
                } else if (x > 25 && x < 125 && y > 95 && y < 125) {
                    fillRect(25, 95, 125, 125, BUTTON_LAYER_ONTOUCH);
                    if (StartLED == false) {//false
                        drawText(L"Turn Off", 25, 101, 100, 1, 0, 18.0f, 65535, 1);
                        waitForPenUp();
                        fillRect(25, 95, 125, 125, RGB(23, 191, 227));
                        drawText(L"Turn Off", 25, 101, 100, 1, 0, 18.0f, 65535, 1);
                        d.setValue(1, "false");
                        // StartLED = true;
                    } else {//ONLY ELSE present
                        drawText(L"Turn On", 25, 101, 100, 1, 0, 18.0f, 65535, 1);
                        waitForPenUp();
                        fillRect(25, 95, 125, 125, RGB(23, 191, 227));
                        drawText(L"Turn On", 25, 101, 100, 1, 0, 18.0f, 65535, 1);
                        d.setValue(1, "true");
                        // StartLED = false;
                    }
                } else if (x > 25 && x < 125 && y > 190 && y < 220) {
                    fillRect(25, 190, 125, 220, BUTTON_LAYER_ONTOUCH);
                    if (StartBlinkLED == false) {
                        drawText(L"Stop Blinking", 25, 196, 100, 1, 0, 18.0f, 65535, 1);
                        waitForPenUp();
                        fillRect(25, 190, 125, 220, RGB(23, 191, 227));
                        drawText(L"Stop Blinking", 25, 196, 100, 1, 0, 18.0f, 65535, 1);
                        d.setValue(2, "false");
                        //StartBlinkLED = true;
                    } else {
                        drawText(L"Blink", 25, 196, 100, 1, 0, 18.0f, 65535, 1);
                        waitForPenUp();
                        fillRect(25, 190, 125, 220, RGB(23, 191, 227));
                        drawText(L"Blink", 25, 196, 100, 1, 0, 18.0f, 65535, 1);
                        d.setValue(2, "true");
//                        LedBlinkStart_onTouch();
                        // StartBlinkLED = false;
                    }
                }
            }
                break;

                
            case ZigbeeCamImage:
            {
                btnImageCount.checkTouch(x, y);
                btnResolution.checkTouch(x, y);
                btnCapture.checkTouch(x, y);
            }
                break;
            case MultiSwitch:
            {
                if (MultiSwitchOnButton.checkTouch(x, y)) {
                    return;
                } else if (MultiSwitchOffButton.checkTouch(x, y)) {
                    return;
                } else if (MultiSwitchOnButton1.checkTouch(x, y)) {
                    return;
                } else if (MultiSwitchOffButton1.checkTouch(x, y)) {
                    return;
                }
            }
                break;
            case ZBIRExtender:
            {
                if ((irApplianceSelected = 1) && ApplianceOne.checkTouch(x, y)) {
                    return;
                } else if ((irApplianceSelected = 2) && ApplianceTwo.checkTouch(x, y)) {
                    return;
                } else if ((irApplianceSelected = 3) && ApplianceThree.checkTouch(x, y)) {
                    return;
                } else if ((irApplianceSelected = 4) && ApplianceFour.checkTouch(x, y)) {
                    return;
                } else if ((irApplianceSelected = 5) && ApplianceFive.checkTouch(x, y)) {
                    return;
                } else if ((irApplianceSelected = 6) && ApplianceSix.checkTouch(x, y)) {
                    return;
                } else if (ChangeApplianceName.checkTouch(x, y)) {
                    return;
                }
            }
                break;
            default:
            {
                Device d(contDevID);
                if (d.getDeviceTechnology() == ZigBeeTechnology) {
                } else {
                    basicSetButton.checkTouch(x, y);
                    basicSetText.checkTouch(x, y);
                    basicGetButton.checkTouch(x, y);
                    basicGetTextBox.checkTouch(x, y);
                    basicSetTextModifyPlus.checkTouch(x, y);
                    basicSetTextModifyMinus.checkTouch(x, y);
                }
            }
                break; //Unknown Device Type";
        }
        memset(opt, 0, sizeof opt);
    } else if (MODE == DEVICE_MODE) {
        
        if (x > 282 && x < 317 && y > 47 && y < 83) { //close button
            //readArea(0, 0, 319, 239);
            ConMode = false;
            ConValFlag = false; //confignewlyadded
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossdefault);
            if (device_key == ZWtoACIRExtender || (device_key == MultiSoundSiren && MultiSoundFlag)) {
                MultiSoundFlag = false;
                drawControlDevice(*getDevice(contDevID));
                MODE = CONTROL_MODE;
            } else {
                EditButton_onTouch();
                MODE = KEY_MODE;
            }
            LOG(Logger::INFO, "DEVICE_MODE");
            strcpy(ConfigParam, "");
            strcpy(ConfigSet, "");
            strcpy(ConfigValue, "");
            ParameterFlag = false, ValueFlag = false, ValueSizeFlag = false;
            tempvaluesize = 0;
            return;
        }

        if ((device_key != ZWtoACIRExtender) && (ConMode == true)) { //configuration settings

            ParameterSetText.checkTouch(x, y);
            if (ParameterFlag) {
                if (ValueSizeSetTextModifyMinus.checkTouch(x, y)) {
                    return;
                } else if (ValueSizeSetTextModifyPlus.checkTouch(x, y)) {
                    return;
                }
            }
            if (ParameterFlag && ValueSizeFlag) {
                ValueSetText.checkTouch(x, y);
            }
            // SetConfigurationButton.checkTouch(x, y);
            if (ConValFlag == true && SetConfigurationButton.checkTouch(x, y)) {
                readArea(0, 0, 319, 239);
                Modal ConfmW;
                ConValFlag = false;
                ConFlag = false;
                ConfmW.setLine1(L"Sending ");
                ConfmW.setLine2(L"Configuration Values.... ");
                ConfmW.modalReturn = &drawArea;
                ConfmW.draw(MODAL_TYPE_INFORMATION, 5);
                ConValFlag = false;
                ConFlag = false;
                LOG(Logger::INFO, "Sending configuration value");
            }

        } else if ((device_key == ZWtoACIRExtender) && (ConMode == true)) {
            LOG(Logger::PRINT, "ZWtoACIRExtender....");
            IRCodeSetText.checkTouch(x, y);
            ParameterSetText.checkTouch(x, y);
            if (ParameterFlag) {
                if (ValueSizeSetTextModifyMinus.checkTouch(x, y)) {
                    return;
                } else if (ValueSizeSetTextModifyPlus.checkTouch(x, y)) {
                    return;
                }
            }
            if (ParameterFlag && ValueSizeFlag) {
                ValueSetText.checkTouch(x, y);
            }
            if ((IRCodeFlag == true) && (IRCodeSetButton.checkTouch(x, y))) {//confignewlyadded
                IRCodeFlag = false;
            }
            if ((ConValFlag == true) && (SetConfigurationButton.checkTouch(x, y))) {//confignewlyadded
                ConValFlag = false;
                ConFlag = false;
                LOG(Logger::INFO, "Sending configuration value");
            }

        } else if (device_key == MultiSoundSiren) {
            if (EmergencySoundButton.checkTouch(x, y)) {
                MultiSoundFlag = false;
                soundtype = 1;
                SelectedSoundType(soundtype);
            }
            if (FireSoundButton.checkTouch(x, y)) {
                MultiSoundFlag = false;
                soundtype = 2;
                SelectedSoundType(soundtype);
            }
            if (AmbulanceSoundButton.checkTouch(x, y)) {
                MultiSoundFlag = false;
                soundtype = 3;
                SelectedSoundType(soundtype);
            }
            if (PoliceSoundButton.checkTouch(x, y)) {
                MultiSoundFlag = false;
                soundtype = 4;
                SelectedSoundType(soundtype);
            }
            if (DoorSoundButton.checkTouch(x, y)) {
                MultiSoundFlag = false;
                soundtype = 5;
                SelectedSoundType(soundtype);
            }
            if (BeepSoundButton.checkTouch(x, y)) {
                MultiSoundFlag = false;
                soundtype = 6;
                SelectedSoundType(soundtype);
            }
        }
    } else if (MODE == COLOR_MODE) {

        Device *d = getDevice(contDevID);
        if ((x > 25 && x < 301) && (y > 110 && y < 150)) {
            int sat;
            while ((x > 25 && x < 301) && (y > 110 && y < 150)) {
                fillRect(25, RECT_Y, 300, RECT_Y + RECT_HEIGHT + 5, RGB(23, 191, 227));
                drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2) + 2, 301 - 5, RECT_Y + (RECT_HEIGHT / 2) + 2, 65535);
                drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 3) + 1, 25 + 5, RECT_Y + ((RECT_HEIGHT * 2) / 3) + 1, 65535);
                drawLine(301 - 5, RECT_Y + (RECT_HEIGHT / 3), 301 - 5, RECT_Y + ((RECT_HEIGHT * 2) / 3) + 1, 65535);
                if (x > 289) {
                    fillCircle(290, RECT_Y + (RECT_HEIGHT / 2) + 2, 5, 65535);
                    sat = 254;
                } else if (x < 36) {
                    fillCircle(35, RECT_Y + (RECT_HEIGHT / 2) + 2, 5, 65535);
                    sat = 0;
                } else {
                    fillCircle(x, RECT_Y + (RECT_HEIGHT / 2) + 2, 5, 65535);
                    sat = (x - 35);
                }
                usleep(50000);
                x = readX();
                y = readY();
            }
//            setbulbsaturation(sat);
            connectedHomeSetValue(4, sat);
        } else if ((x > 25 && x < 301) && (y > 180 && y < 222)) {
            if (d->getDeviceTechnology() == ZigBeeTechnology) {
                int h_val;
                if (x > 25 && x < 280) {
                    while ((x > 25 && x < 280) && (y > 180 && y < 222)) {
                        pngImg.drawPNG(25, RECT_Y + (RECT_HEIGHT / 2) + 55, 1, 0, color_png);
                        fillRect(280, 181, 300, 221, RGB(255, 255, 255));
                        drawLine(x, RECT_Y + (RECT_HEIGHT / 2) + 55, x, RECT_Y + (RECT_HEIGHT / 2) + 95, 0);
                        h_val = (x - 25);
                        usleep(50000);
                        x = readX();
                    }
                    if (h_val <= 255)
                        connectedHomeSetValue(3, h_val);
                } else {
                    waitForPenUp();
                    setbulbhueandsat(0, 0);
                }
            } else if (d->getDeviceTechnology() == HueTechnology) {
                int newCol;
                if ((x > 25 && x < 280) && (y > 180 && y < 222)) {
                    while (x >= 25 && y >= 180 && x <= 280 && y <= 222) {
                        pngImg.drawPNG(25, RECT_Y + (RECT_HEIGHT / 2) + 55, 1, 0, color_png);
                        fillRect(280, 181, 300, 221, RGB(255, 255, 255));
                        newCol = getColorFromScreen(x, y);
                        drawLine(x, RECT_Y + (RECT_HEIGHT / 2) + 55, x, RECT_Y + (RECT_HEIGHT / 2) + 95, 0);
                        x = readX();
                        y = readY();
                        usleep(90000);
                    }
                    if (strstr(d->getValue(2), "true")) {
                        d->setColorBulb(newCol);
                    }
                }
                if (x > 280 && x < 300 && y > 180 && y < 222) {
                    waitForPenUp();
                    pngImg.drawPNG(25, RECT_Y + (RECT_HEIGHT / 2) + 55, 1, 0, color_png);
                    fillRect(280, 181, 300, 221, RGB(255, 255, 255));
                    drawLine(x, RECT_Y + (RECT_HEIGHT / 2) + 55, x, RECT_Y + (RECT_HEIGHT / 2) + 95, 0);
//                    setbulbsaturation(0);
                    connectedHomeSetValue(4, "0");
                }
            }
        } else if (x > 282 && x < 317 && y > 47 && y < 83) {
            waitForPenUp();
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            drawControlDevice(contDevID);
            MODE = CONTROL_MODE;
            return;
        }
    } else if (MODE == KEY_MODE) {
        if (x > 282 && x < 317 && y > 47 && y < 83) {
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            drawControlDevice(contDevID);
            MODE = CONTROL_MODE;
            return;
        }
        if (En_Key) {
            Device d(contDevID);
            LocationBox->checkTouch(x, y);
            NameBox->checkTouch(x, y);
            DoneButton->checkTouch(x, y);
            if (d.getDeviceTechnology() != AlmondTechnology) {
                if ((d.getDeviceTechnology() == ZWaveTechnology) && (d.getDeviceType() != ZWtoACIRExtender) && ConfigurationButton1.checkTouch(x, y)) {
                    LOG(Logger::INFO, "======En_Key ConfigurationButton1 touch==========");
                } else {
                    LOG(Logger::INFO, "======En_Key RemovedeviceButton touch==========");
                    RemovedeviceButton.checkTouch(x, y);
                }
            }
            return;
        }
    } else if (MODE == RETAIN_MODE) {
        if (updatetouchflag)
            upgradeButton.checkTouch(x, y);
        else
            checkforupgradeButton.checkTouch(x, y);

        if (RetainButton.checkTouch(x, y)) {
            return;
        }
        if (x > 282 && x < 317 && y > 47 && y < 83) {
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            drawControlDevice(contDevID);
            MODE = CONTROL_MODE;
            updates_available = 0;
            updatetouchflag = false;
            return;
        }
    } else if (MODE == UPGRADE_MODE) {
        if (x > 282 && x < 317 && y > 47 && y < 83) {
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            drawControlDevice(contDevID);
            MODE = CONTROL_MODE;
            updates_available = 0;
            updatetouchflag = false;
            return;
        }
    } else if (MODE == REMOVE_MODE) {
        YesButton.checkTouch(x, y);
        NoButton.checkTouch(x, y);
    } else if (MODE == GENERIC_MODE) {
        if (x > 282 && x < 317 && y > 47 && y < 83) { //x > 413 && x < 435 && y > 42 && y < 64
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            gen.p_area = 0;
            multiswitch = false;
            drawControlDevice(*getDevice(contDevID));
            MODE = CONTROL_MODE;
            return;
        }
        genericControlDeviceTouch(x, y);
    } else if (MODE == DEVICE_MODE) {
        if ((x > 282 && x < 317 && y > 47 && y < 83) && ConMode == false) {
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            if (device_key == GenericDevice) {
                MODE = CONTROL_MODE;
                gen.p_area = 0.0;
            }
            drawControlDevice(*getDevice(contDevID));
            MODE = CONTROL_MODE;
        } else if (device_key == MultiSoundSiren || device_key == GenericDevice) {
            LOG(Logger::PRINT, "Sending multisound value");
            if (EmergencySoundButton.checkTouch(x, y)) {
                soundtype = 1;
                SelectedSoundType(soundtype);
            }
            if (FireSoundButton.checkTouch(x, y)) {
                soundtype = 2;
                SelectedSoundType(soundtype);
            }
            if (AmbulanceSoundButton.checkTouch(x, y)) {
                soundtype = 3;
                SelectedSoundType(soundtype);
            }
            if (PoliceSoundButton.checkTouch(x, y)) {
                soundtype = 4;
                SelectedSoundType(soundtype);
            }
            if (DoorSoundButton.checkTouch(x, y)) {
                soundtype = 5;
                SelectedSoundType(soundtype);
            }
            if (BeepSoundButton.checkTouch(x, y)) {
                soundtype = 6;
                SelectedSoundType(soundtype);
            }
        }
    } else if (MODE == BLINK_COLOR_MODE) {

        if (x > 26 && x < 280 && y > 145 && y < 185) {
            int x_cor = 0;
            while (x > 26 && x < 280 && y > 145 && y < 185) {
                pngImg.drawPNG(25, 145, 1, 0, color_shades);
                drawLine(x - 2, 145, x - 2, 185, 0);
                x_cor = x;
                x = readX();
                y = readY();
                usleep(90000);
            }
            //           fullLedCol = getFullHue(presentColor);
            /*presentColor = */findNewShadeOfColor(presentColor, x_cor - 25);
        }

        if (x > 282 && x < 317 && y > 47 && y < 83) {
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            drawControlDevice(contDevID);
            MODE = CONTROL_MODE;
            return;
        }
    } else if (MODE == IR_OPERATION_MODE) {
        if ((irAppButtonSelected = 1) && AppButtonOne.checkTouch(x, y)) {
            return;
        } else if ((irAppButtonSelected = 2) && AppButtonTwo.checkTouch(x, y)) {
            return;
        } else if ((irAppButtonSelected = 3) && AppButtonThree.checkTouch(x, y)) {
            return;
        } else if ((irAppButtonSelected = 4) && AppButtonFour.checkTouch(x, y)) {
            return;
        } else if ((irAppButtonSelected = 5) && AppButtonFive.checkTouch(x, y)) {
            return;
        } else if ((irAppButtonSelected = 6) && AppButtonSix.checkTouch(x, y)) {
            return;
        } else if ((irAppButtonSelected = 7) && AppButtonSeven.checkTouch(x, y)) {
            return;
        } else if ((irAppButtonSelected = 8) && AppButtonEight.checkTouch(x, y)) {
            return;
        } else if ((irApplianceSelected < 6) && SelectIRLed.checkTouch(x, y)) {
            return;
        } else if (ChangeButtonName.checkTouch(x, y)) {
            return;
        }

        if (x > 282 && x < 317 && y > 47 && y < 83) {
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            drawControlDevice(contDevID);
            MODE = CONTROL_MODE;
            return;
        }
    } else if (MODE == IR_LED_SELECTION_MODE) {
        if ((irAppLedSelected = 1) && IRLed1->checkTouch(x, y)) {
            return;
        } else if ((irAppLedSelected = 2) && IRLed2->checkTouch(x, y)) {
            return;
        } else if ((irAppLedSelected = 3) && IRLed3->checkTouch(x, y)) {
            return;
        } else if ((irAppLedSelected = 4) && IRLed4->checkTouch(x, y)) {
            return;
        } else if ((irAppLedSelected = 5) && IRLed5->checkTouch(x, y)) {
            return;
        } else if ((irAppLedSelected = 6) && IRLed6->checkTouch(x, y)) {
            return;
        } else if (selectIRLedDone.checkTouch(x, y)) {
            return;
        }

        if (x > 282 && x < 317 && y > 47 && y < 83) {
            fillRect(287, 57, 307, 77, RR_COLOR);
            pngImg.drawPNG(287, 57, 1, BACKGROUND_LAYER, crossonTouch);
            waitForPenUp();
            delete IRLed1, IRLed2, IRLed3;
            delete IRLed4, IRLed5, IRLed6;
            drawArea();
            MODE = IR_OPERATION_MODE;
            return;
        }
    } else if (MODE == EDIT_APPLIANCE_NAME) {
        waitForPenUp();
        if (x > 25 && x < 110 && y > 95 && y < 125) {
            EditApplianceNameOnTouch(1);
            return;
        } else if (x > 120 && x < 205 && y > 95 && y < 125) {
            EditApplianceNameOnTouch(2);
            return;
        } else if (x > 215 && x < 300 && y > 95 && y < 125) {
            EditApplianceNameOnTouch(3);
            return;
        } else if (x > 25 && x < 110 && y > 135 && y < 165) {
            EditApplianceNameOnTouch(4);
            return;
        } else if (x > 120 && x < 205 && y > 135 && y < 165) {
            EditApplianceNameOnTouch(5);
            return;
        } else if (x > 215 && x < 300 && y > 135 && y < 165) {
            EditApplianceNameOnTouch(6);
            return;
        } else if (selectIRLedDone.checkTouch(x, y)) {
            return;
        }

    } else if (MODE == EDIT_BUTTON_NAME) {
        waitForPenUp();
        if (x > 25 && x < 85 && y > 95 && y < 125) {
            EditIRButtonEventNameOnTouch(1);
        } else if (x > 95 && x < 155 && y > 95 && y < 125) {
            EditIRButtonEventNameOnTouch(2);
        } else if (x > 165 && x < 225 && y > 95 && y < 125) {
            EditIRButtonEventNameOnTouch(3);
        } else if (x > 235 && x < 295 && y > 95 && y < 125) {
            EditIRButtonEventNameOnTouch(4);
        } else if (x > 25 && x < 85 && y > 135 && y < 165) {
            EditIRButtonEventNameOnTouch(5);
        } else if (x > 95 && x < 155 && y > 135 && y < 165) {
            EditIRButtonEventNameOnTouch(6);
        } else if (x > 165 && x < 225 && y > 135 && y < 165) {
            EditIRButtonEventNameOnTouch(7);
        } else if (x > 235 && x < 295 && y > 135 && y < 165) {
            EditIRButtonEventNameOnTouch(8);
        } else if (selectIRLedDone.checkTouch(x, y)) {
            return;
        }

    } else if (MODE == ALMOND_LIST_MODE) {
        Irlst->getTouch(x, y);
        if(x > 4 && x < 50 && y > 4 && y < 50) {
            fillRect(5, 5, 45, 45, 0);
            pngImg.drawPNG(5, 5, 1, 0, backButtonPressImg);
            waitForPenUp();
            drawArea();
            MODE = preMode;
            if(preMode == KEY_MODE) {
                delete Irlst;
                free(deviceLocation);
            }
        }
    }
}

void genericControlDeviceTouch(int x, int y) {
    sprintf(t_temp, "In on button endpnt x %d y %d", x, y);
    LOG(Logger::INFO, t_temp);
    if (y > 90 && y < 123) { //Row1
        waitForPenUp();
        if (x > 10 && x < 110) {
            genericTouchHandler(grid1[0], x, y);
        } else if (x > 110 && x < 210) {
            genericTouchHandler(grid1[1], x, y);
        } else if (x > 210 && x < 310) {
            genericTouchHandler(grid1[2], x, y);
        }
    } else if (y > 123 && y < 156) { //Row2
        waitForPenUp();
        if (x > 10 && x < 110) {
            genericTouchHandler(grid2[0], x, y);
        } else if (x > 110 && x < 210) {
            genericTouchHandler(grid2[1], x, y);
        } else if (x > 210 && x < 310) {
            genericTouchHandler(grid2[2], x, y);
        }
    } else if (y > 156 && y < 189) { //Row3
        //        LOG(Logger::INFO,"Row 3 touched");
        waitForPenUp();
        if (x > 10 && x < 110) {
            genericTouchHandler(grid3[0], x, y);
        } else if (x > 110 && x < 210) {
            genericTouchHandler(grid3[1], x, y);
        } else if (x > 210 && x < 310) {
            genericTouchHandler(grid3[2], x, y);
        }
    }

    if ((tamper == true) && (x > 15 && y > 190 && x < 95 && y < 220)) {
        Device *d = getDevice(contDevID);
        if (d) {
            if (strcmp(d->getValue("TAMPER"), "true") == 0) {
                TamperButton.checkTouch(x, y);
            }
        }
    } else if ((more == true) && (x > 120 && y > 190 && x < 200 && y < 220)) {
        LOG(Logger::INFO, "genericControlDeviceTouch morebutton check...");
        waitForPenUp();
        MoreButton.checkTouch(x, y);
    }
    gen.x_present = gen.y_present = 0;
}

int getEndpointforSwitchBinary(int indexen, int y, int diff) {
    Device *d = getDevice(contDevID);
    int endpt = 0;
    /*****y is used as a index number for callback else it's y-coordinate.****/

    if ((grid1[0] == indexen) && (grid2[0] == indexen) && (grid3[0] == indexen)) {
        if (diff == GENERIC_CALLBACK) {
            endpt = d->getEndPointValue(y);
            if (endpt == 1) {
                gen.y_prev23 = 94;
            } else if (endpt == 2) {
                gen.y_prev23 = 130;
            } else if (endpt == 3) {
                gen.y_prev23 = 160;
            }
            return 0;
        } else if (diff == GENERIC_TOUCH) {
            if (y == 94) {
                return 1;
            } else if (y == 126) {
                return 2;
            } else if (y == 158) {
                return 3;
            }
        }
    } else if ((grid1[0] == indexen) && (grid2[0] == indexen)) {
        if (diff == GENERIC_CALLBACK) {
            endpt = d->getEndPointValue(y);
            if (endpt == 1)
                gen.y_prev23 = 100;
            else {
                if ((endpt == 2) && (d->getDeviceTechnology() == ZWaveTechnology))
                    gen.y_prev23 = 100;
                else
                    gen.y_prev23 = 130;
            }
            return 0;
        } else if (diff == GENERIC_TOUCH) {
            if (y == 94)
                return 1;
            else {
                if (d->getDeviceTechnology() == ZigBeeTechnology)
                    return 2;
                else if (d->getDeviceTechnology() == ZWaveTechnology)
                    return 3;
            }
        }
    } else if ((grid2[0] == indexen) && (grid3[0] == indexen)) {
        if (diff == GENERIC_CALLBACK) {
            endpt = d->getEndPointValue(y);
            if (endpt == 1)
                gen.y_prev23 = 130;
            else {
                if ((endpt == 2) && (d->getDeviceTechnology() == ZWaveTechnology))
                    gen.y_prev23 = 130;
                else
                    gen.y_prev23 = 160;
            }
            return 0;
        } else if (diff == GENERIC_TOUCH) {
            if (y == 126)
                return 1;
            else {
                if (d->getDeviceTechnology() == ZigBeeTechnology)
                    return 2;
                else if (d->getDeviceTechnology() == ZWaveTechnology)
                    return 3;
            }
        }
    } else if ((grid1[0] == indexen) && (grid3[0] == indexen)) {
        if (diff == GENERIC_CALLBACK) {
            endpt = d->getEndPointValue(y);
            if (endpt == 1)
                gen.y_prev23 = 100;
            else {
                if ((endpt == 2) && (d->getDeviceTechnology() == ZWaveTechnology))
                    gen.y_prev23 = 100;
                else
                    gen.y_prev23 = 160;
            }
            return 0;
        } else if (diff == GENERIC_TOUCH) {
            if (y == 94)
                return 1;
            else {
                if (d->getDeviceTechnology() == ZigBeeTechnology)
                    return 2;
                else if (d->getDeviceTechnology() == ZWaveTechnology)
                    return 3;
            }
        }
    } else {
        return (d->getEndPointValue(d->getIndexNoFromName("SWITCH BINARY", -1)));
    }
}

void genericTouchHandler(unsigned char indx, int x, int y) {
    unsigned int indextp = indx, endpt;
    unsigned int indexNo;
    char indexName[30] = "";
    int x_star, y_star;
    float areath = 0.0;
    gen.y_prev23 = y;
    areath = getRequiredIndexArea(indextp);
    getDrawingCorditforCallback(areath, indextp, GENERIC_TOUCH);
    x_star = gen.x_present;
    y_star = gen.y_present;
    sprintf(t_temp, "x_star:%d y_star:%d", x_star, y_star);
    LOG(Logger::INFO, t_temp);
    Device d(contDevID);
    IndexTypeEnumToStr((enum IndexType)indextp, indexName, 0);
    indexNo = d.getIndexNoFromName(indexName, -1);
    switch (indx) {
        case SwitchBinary:
        {
            
            endpt = getEndpointforSwitchBinary(indextp, y_star, GENERIC_TOUCH);
            sprintf(t_temp, "In on button endpnt%d indextp %d y_star %d", endpt, indextp, y_star);
            LOG(Logger::INFO, t_temp);
            if (x > x_star + 100 && x < x_star + 180 && y > y_star && y < y_star + 29) {
                fillRect(x_star + 100, y_star, x_star + 180, y_star + 29, BUTTON_LAYER);
                drawText(lan.get("on_1", "common"), x_star + 100, y_star + 5, 80, 1, 0, 20.0f, 65535, 1);
                fillRect(x_star + 200, y_star, x_star + 280, y_star + 29, RGB(23, 191, 227));
                drawText(lan.get("off_1", "common"), x_star + 200, y_star + 5, 80, 1, 0, 20.0f, 65535, 1);
                connectedHomeSetValue(indexNo, "true");
            } else if (x > x_star + 200 && x < x_star + 280 && y > y_star && y < y_star + 30) {
                sprintf(t_temp, "In off button endpnt%d", endpt);
                LOG(Logger::INFO, t_temp);
                fillRect(x_star + 100, y_star, x_star + 180, y_star + 29, RGB(23, 191, 227));
                drawText(lan.get("on_1", "common"), x_star + 100, y_star + 5, 80, 1, 0, 20.0f, 65535, 1);
                fillRect(x_star + 200, y_star, x_star + 280, y_star + 29, BUTTON_LAYER);
                drawText(lan.get("off_1", "common"), x_star + 200, y_star + 5, 80, 1, 0, 20.0f, 65535, 1);
                connectedHomeSetValue(indexNo, "false");
            }
            sprintf(t_temp, "SwitchBinary  endpoint:%d ", endpt);
            LOG(Logger::INFO, t_temp);
        }
            break;
        case SwitchMultilevel:
        {
            sprintf(t_temp, "Switch Multilevel x:%d y:%d ", x, y);
            LOG(Logger::INFO, t_temp);
            dimmerCurrLevel = -1;
            while (x > x_star + 60 && y > y_star && x < x_star + 260 && y < y_star + 29) {
                fillRect(x_star + 50, y_star, x_star + 270, y_star + 29, RGB(23, 191, 227));
                drawLine(x_star + 55, y_star + 15, x_star + 265, y_star + 15, 65535);
                drawLine(x_star + 55, y_star + 7, x_star + 55, y_star + 23, 65535);
                drawLine(x_star + 265, y_star + 7, x_star + 265, y_star + 23, 65535);
                if (x > x_star + 260) {
                    fillCircle(260, y_star + 15, 5, 65535);
                    dimmerCurrLevel = 100;
                } else if (x < x_star + 60) {
                    fillCircle(x_star + 60, y_star + 15, 5, 65535);
                    dimmerCurrLevel = 0;
                } else {
                    fillCircle(x, y_star + 15, 5, 65535);
                    dimmerCurrLevel = (x - (x_star + 60));
                    dimmerCurrLevel = dimmerCurrLevel / 2;

                }
                usleep(90000);
                x = readX();
                y = readY();
            }
            if (dimmerCurrLevel != -1) {
//                multilevelGoToLevel(dimmerCurrLevel);
                connectedHomeSetValue(indexNo, dimmerCurrLevel);
            }
        }
            break;
        case SwitchMultiSound:

