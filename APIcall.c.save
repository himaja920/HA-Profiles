#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<bits/stdc++.h>
#include<unistd.h>
#include <sys/ioctl.h>
#include <wchar.h>
#include <net/if.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/file.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <sched.h>
#include <curl/curl.h>
#include <curl/easy.h>
#include <list>
#include <signal.h>
#include <libAlmond.h>
#include <libAlmondHA.h>
#include "main.h"
#include <unicode.h>
#include <Logger.h>
#include <libAlmondHA_Private.h>
#include "almond_timer.h"
#include "almondList.h"
#include <math.h>
#include "libAlmondHA.h"
//Logger *logger;

void theCallback(Device* notifiedDevice);
void theEventCallback(Event *e);

DeviceList dL;
Screen *connected_home;
list<Device>::iterator it;


    HADevices::initializeFree2();
    //HADevices::genericCallback(&theCallback);
    HADevices::eventCallback(&theEventCallback);


    
    /*static void eventCallback(void (*callback)(Event*));
    {
        void theEventCallback(Event * e);*/
  


void theEventCallback(Event * e) {
    if (e->event) {
        switch (e->event) {
            case DeviceAdded:
            {
                LOG(Logger::PRINT, "Received DeviceAdded event");
                DeviceEvent DevicePacket;
                memcpy(&DevicePacket, e->data, sizeof (DevicePacket));
                try {
                    Device d(DevicePacket.DevId);
                    dL.devices.push_back(d);
                    if (MODE == LIST_MODE || MODE == CONTROL_MODE) {
                        int cnt = 0;
                        for (list <Device>::iterator iterator = dL.devices.begin(); (iterator != dL.devices.end()) && (cnt < 250); ++iterator) {
                            devIdList[cnt++] = (*iterator).getID();
                        }
                        //connectedHome_draw();
                    }
                    if (MODE == LIST_MODE) {
                        //sleep(10);
                        connectedHome_draw();
                    }
                } catch (int i) {
                    char buf[100] = "";
                    sprintf(buf, "Exception caught while loading device %d", DevicePacket.DevId);
                    LOG(Logger::ERROR, buf);
                }
            }
                break;
            case DeviceRemoved:
            {
                LOG(Logger::PRINT, "Received DeviceRemoved event");
                DeviceEvent DevicePacket;

                memcpy(&DevicePacket, e->data, sizeof (DevicePacket));
                list <Device>::iterator it = dL.devices.begin();
                for (; it != dL.devices.end(); ++it) {
                    if ((*it).getID() == DevicePacket.DevId) {
                        LOG(Logger::INFO, "-----------------");
                        dL.devices.erase(it);
                        int cnt = 0;
                        for (list <Device>::iterator iterator = dL.devices.begin(); (iterator != dL.devices.end()) && (cnt < 250); ++iterator) {
                            devIdList[cnt++] = (*iterator).getID();
                        }
                        if (contDevID == DevicePacket.DevId) {
                            MODE = LIST_MODE;
                            connectedHome_draw();
                        }
                        break;
                    }
                }
            }
                break;
            case DeviceRemoveAll:
            {
                LOG(Logger::PRINT, "Received DeviceRemoveAll event");
                dL.devices.clear();
                connectedHome_draw();
            }
                break;
            case DeviceUpdated:
            {
                LOG(Logger::PRINT, "Received DeviceUpdated event");
                DeviceEvent DevicePacket;
                memcpy(&DevicePacket, e->data, sizeof (DevicePacket));
                for (list <Device>::iterator iterator = dL.devices.begin(); iterator != dL.devices.end(); ++iterator) {
                    if ((*iterator).getID() == DevicePacket.DevId) {
                        (*iterator).RefreshDevice();
                        if (MODE == CONTROL_MODE) {
                            if (DevicePacket.DevId == contDevID) {
                                char ss[180];
                                fillRect(32, 57, 285, 92, RR_COLOR);
                                memset(opt, 0, sizeof (opt));
                                utf8_to_wchar((*iterator).getDeviceName(), strlen((*iterator).getDeviceName()), opt, strlen((*iterator).getDeviceName()), UTF8_IGNORE_ERROR);
                                drawText(opt, 32, 57, 253, 1, 0, 20.0f, 65535, 1);
                                memset(opt, 0, sizeof (opt));
                                sprintf(ss, "@ %hs", (*iterator).getDeviceLocation());
                                utf8_to_wchar(ss, strlen(ss), opt, strlen(ss), UTF8_IGNORE_ERROR);
                                drawText(opt, 30, 77, 250, 1, 0, 16.0f, 65535, 1);
                                memset(opt, 0, sizeof (opt));
                            }
                        } else if (MODE == LIST_MODE) {
                            if (dL.devices.size() <= 12) {
                                connectedHome_draw();
                            } else {
                                for (int i = 0; i < dL.devices.size(); i++) {
                                    if (devIdList[i] == DevicePacket.DevId) {
                                        if ((i / 11) == curPage) {
                                            connectedHome_draw();
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    }
                }

            }
                break;
            case AlmondModeUpdated:
            {
               /* strncpy(almond_mode, (char*) e->data + 5, 2);
                LOG(Logger::INFO, almond_mode);
                if (MODE == LIST_MODE) {
                    fillRect(275, 5, 319, 60, BACKGROUND_LAYER);
                    if (atoi(almond_mode) == 2) {
                        pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, in_home);
                    } else if (atoi(almond_mode) == 3) {
                        pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, away_home);
                    }

                }
                sprintf(t_temp, "data received AlmondModeUpdated %s", e->data);
                LOG(Logger::INFO, t_temp);*/
            }
                break;
            case AlmondUpdated:
            {
               /* char buf[100] = "";
                RouterData rDat;
                memcpy(&rDat, e->data, sizeof (rDat));

                switch (rDat.DataType) {
                    case AlmondMode:
                    {
                        sprintf(buf, "Received %s Data", rDat.Data);
                        LOG(Logger::PRINT, buf);
                        if (MODE == LIST_MODE) {
                            fillRect(275, 5, 319, 60, BACKGROUND_LAYER);
                            if (rDat.Data[0] == '2') {
                                pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, in_home);
                            } else if (rDat.Data[0] == '3') {
                                pngImg.drawPNG(290, 5, 0, BACKGROUND_LAYER, away_home);
                            }

                        }
                    }
                        break;
                }*/
            }
                break;
            default:
            {

                char buf[100] = "", evnt[30] = "";
                getEventAsString(e->event, evnt);
                sprintf(buf, "Received %s event", evnt);
                LOG(Logger::PRINT, buf);
            }
                break;
        }
    }
}




void theCallback(Device * notifiedDevice) {
    for (list <Device>::iterator iterator = dL.devices.begin(); iterator != dL.devices.end(); ++iterator) {
        if ((*iterator).getID() == notifiedDevice->getID()) {
            (*iterator).RefreshDevice();
        }
    }

    if (notifiedDevice->getLastNotificationIndex() == 15 && MODE == LIST_MODE) {
        if (notifiedDevice->getDeviceType() == SecurifiSmartSwitch) {
            for (list<peanut_plug>::iterator iterator = peanut_plug_info.begin(); iterator != peanut_plug_info.end(); ++iterator) {
                if ((iterator->S_Dev_ID == notifiedDevice->getID())) {
                    if (atoi(notifiedDevice->getLastNotificationIndexValue()) > 200) {
                        iterator->S_state = false;
                        iterator->percentage = 0;
                        u_val = 0;
                        ota_upgrade_flag = false;
                    } else if ((atoi(notifiedDevice->getLastNotificationIndexValue()) < 100)) {
                        iterator->S_state = true;
                        ota_upgrade_flag = true;
                        s_devid = notifiedDevice->getID();
                        iterator->percentage = (atoi(notifiedDevice->getLastNotificationIndexValue()));
                    } else {
                        iterator->S_state = false;
                        iterator->percentage = 0;
                        ota_upgrade_flag = false;
                        u_val = 0;
                    }
                }
            }
        }
    }

    if (MODE == LIST_MODE || MODE == KEY_MODE) {

        return;
    }
    if (MODE == CONTROL_MODE || MODE == COLOR_MODE || MODE == UPGRADE_MODE || MODE == RETAIN_MODE || MODE == BLINK_COLOR_MODE || (MODE == IR_OPERATION_MODE) || (MODE == IR_LED_SELECTION_MODE) || (MODE == EDIT_APPLIANCE_NAME) || (MODE == EDIT_BUTTON_NAME)) {
        if (notifiedDevice->getID() == contDevID) {
            memset(opt, 0, sizeof (opt));
            switch (contDev) {
                case UnknownOnOffModule:
                case BinarySwitch:
                case Siren:
                {
                    Device d(contDevID);
                        char tmp_str[30];
                    if (d.getDeviceTechnology() == ZWaveTechnology) {//newal2
                        if (notifiedDevice->getLastNotificationIndex() == 1) {
                            fillRect(50, 100, 200, 135, RR_COLOR);
                            strcpy(tmp_str, notifiedDevice->getLastNotificationIndexValue());
                            swprintf(opt, 179, L"%ls", (tmp_str[0] == 'f' || tmp_str[0] == 'F') ? lan.get("off_1", "common") : lan.get("on_1", "common"));
                            drawText(opt, 60, 100, 200, 1, 0, 45.0f, 65535, 1);
                        } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                            int batteryVal;
                            batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                            pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                            if (batteryVal != 0xff && batteryVal != 0) {
                                swprintf(opt, 5, L"%hd%%", batteryVal);
                                drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                            } else {
                                drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                            }
                        }
                    } else {
                        if (notifiedDevice->getLastNotificationIndex() == 1) {
                            strcpy(tmp_str, notifiedDevice->getLastNotificationIndexValue());
                            fillRect(NOTIFICATION_X, NOTIFICATION_Y, 309, NOTIFICATION_Y + 35, RR_COLOR);
                            swprintf(opt, 179, L"%ls", (tmp_str[0] == 'f' || tmp_str[0] == 'F') ? lan.get("off_1", "common") : lan.get("on_1", "common"));
                            drawText(opt, NOTIFICATION_X, NOTIFICATION_Y, 300, 1, 0, 35.0f, 65535, 1);
                        }
                    }
                }
                    break; //Switch";
                case MultilevelSwitch:
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        dimmerCurrLevel = 2 * atoi(notifiedDevice->getLastNotificationIndexValue());
                        if (dimmerCurrLevel == 0) {
                            swprintf(opt, 179, L"%ls(%d%%)", lan.get("off_1", "common"), (dimmerCurrLevel / 2));
                        } else {
                            swprintf(opt, 179, L"%ls(%d%%)", lan.get("on_1", "common"), (dimmerCurrLevel / 2));
                        }
                        fillRect(NOTIFICATION_X + 100, NOTIFICATION_Y - 14, 200, NOTIFICATION_Y + 2, RR_COLOR);
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y - 14, 300, 1, 0, 18.0f, 65535, 1);
                        fillRect(RECT_X, RECT_Y, RECT_X + RECT_WIDTH, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                        drawLine(RECT_X + 5, RECT_Y + (RECT_HEIGHT / 2), RECT_X + RECT_WIDTH - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                        drawLine(RECT_X + 5, RECT_Y + (RECT_HEIGHT / 3), RECT_X + 5, RECT_Y + ((RECT_HEIGHT * 2) / 3), 65535);
                        drawLine(RECT_X + RECT_WIDTH - 5, RECT_Y + (RECT_HEIGHT / 3), RECT_X + RECT_WIDTH - 5, RECT_Y + ((RECT_HEIGHT * 2) / 3), 65535);
                        fillCircle(RECT_X + 10 + dimmerCurrLevel, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                    }
                    break; //Dimmer";
                case BinaryPowerSwitch:
                {
                    char tmp_str[30];
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        strcpy(tmp_str, notifiedDevice->getLastNotificationIndexValue());
                        fillRect(40, 95, 430, 145, RR_COLOR);
                        swprintf(opt, 179, L"%ls", (tmp_str[0] == 'f' || tmp_str[0] == 'F') ? lan.get("off_1", "common") : lan.get("on_1", "common"));
                        fillRect(NOTIFICATION_X + 27, NOTIFICATION_Y - 15, 115, NOTIFICATION_Y + 25, RR_COLOR);
                        drawText(opt, NOTIFICATION_X + 28, NOTIFICATION_Y, 110, 1, 0, 35.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        strcpy(tmp_str, notifiedDevice->getLastNotificationIndexValue());
                        fillRect(NOTIFICATION_X + 105, NOTIFICATION_Y - 15, 250, NOTIFICATION_Y + 30, RR_COLOR);
                        swprintf(opt, 179, L"(%ls:%hs W)", lan.get("power", "connected_sensor"), tmp_str);
                        drawText(opt, NOTIFICATION_X + 105, NOTIFICATION_Y + 5, 150, 1, 0, 25.0f, 65535, 1);
                    }
                }
                    break; //Dimmer";
                case MultilevelSwitchOnOff:
                case ColorDimmableLight:
                {
                    float val;
                    if (MODE == CONTROL_MODE) {
                            char tmp_str[30];
                        if (notifiedDevice->getLastNotificationIndex() == 2) {
                            dimmerCurrLevel = atoi(notifiedDevice->getValue(1));
                            strcpy(tmp_str, notifiedDevice->getLastNotificationIndexValue());
                            val = ((float) (dimmerCurrLevel * 100) / (float) 255);
                            fillRect(NOTIFICATION_X, NOTIFICATION_Y - 15, 309, NOTIFICATION_Y + 5, RR_COLOR);
                            swprintf(opt, 179, L"%ls (%d%%)", (tmp_str[0] == 'f' || tmp_str[0] == 'F') ? lan.get("off_1", "common") : lan.get("on_1", "common"), roundfun(val));
                            drawText(opt, NOTIFICATION_X, NOTIFICATION_Y - 15, 300, 1, 0, 18.0f, 65535, 1);
                            //   char devarr[50];
                        } else if (notifiedDevice->getLastNotificationIndex() == 1) {
                            strcpy(tmp_str, notifiedDevice->getValue(2));
                            dimmerCurrLevel = atoi(notifiedDevice->getLastNotificationIndexValue());
                            val = round(((float) (dimmerCurrLevel * 100) / (float) 255));
                            fillRect(NOTIFICATION_X, NOTIFICATION_Y - 15, 309, NOTIFICATION_Y + 5, RR_COLOR);
                            swprintf(opt, 179, L"%ls (%d%%)", (tmp_str[0] == 'f' || tmp_str[0] == 'F') ? lan.get("off_1", "common") : lan.get("on_1", "common"), roundfun(val));
                            drawText(opt, NOTIFICATION_X, NOTIFICATION_Y - 15, 300, 1, 0, 18.0f, 65535, 1);
                            fillRect(25, RECT_Y, 301, RECT_Y + RECT_HEIGHT, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2), 301 - 5, RECT_Y + (RECT_HEIGHT / 2), 65535);
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 3), 25 + 5, RECT_Y + ((RECT_HEIGHT * 2) / 3), 65535);
                            drawLine(301 - 5, RECT_Y + (RECT_HEIGHT / 3), 301 - 5, RECT_Y + ((RECT_HEIGHT * 2) / 3), 65535);
                            fillCircle(25 + 10 + dimmerCurrLevel, RECT_Y + (RECT_HEIGHT / 2), 5, 65535);
                            //       char devarr[50];
                        } else if (notifiedDevice->getLastNotificationIndex() == 5) {
                            int color_t;
                            color_t = atoi(notifiedDevice->getLastNotificationIndexValue());
                            color_t = (color_t - 1000) / 32 + 25;
                            pngImg.drawPNG(25, RECT_Y + 40, 1, 0, color_temp);
                            drawLine(color_t, RECT_Y + 40, color_t, RECT_Y + 40 + RECT_HEIGHT, 0);
                        }
                    } else if (MODE == COLOR_MODE) {
                        if (notifiedDevice->getLastNotificationIndex() == 4) {
                            int sat_v = atoi(notifiedDevice->getLastNotificationIndexValue());
                            fillRect(10, 90, 310, 150, RR_COLOR);
                            percentage = (int) round(((sat_v * 100) / 254.0));
                            swprintf(opt, 179, L"Sat - %d%%", percentage);
                            drawText(opt, NOTIFICATION_X, NOTIFICATION_Y - 15, 300, 1, 0, 18.0f, 65535, 1);
                            fillRect(25, RECT_Y, 300, RECT_Y + RECT_HEIGHT + 5, RGB(23, 191, 227));
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 2) + 2, 301 - 5, RECT_Y + (RECT_HEIGHT / 2) + 2, 65535);
                            drawLine(25 + 5, RECT_Y + (RECT_HEIGHT / 3) + 1, 25 + 5, RECT_Y + ((RECT_HEIGHT * 2) / 3) + 1, 65535);
                            drawLine(301 - 5, RECT_Y + (RECT_HEIGHT / 3), 301 - 5, RECT_Y + ((RECT_HEIGHT * 2) / 3) + 1, 65535);
                            fillCircle(35 + sat_v, RECT_Y + (RECT_HEIGHT / 2) + 2, 5, 65535);
                            int hue_v = atoi(notifiedDevice->getValue(3));
                            hue_v = hue_v + 25;
                            pngImg.drawPNG(25, RECT_Y + (RECT_HEIGHT / 2) + 55, 1, 0, color_png);
                            fillRect(280, 181, 300, 221, RGB(255, 255, 255));
                            drawLine(hue_v, RECT_Y + (RECT_HEIGHT / 2) + 55, hue_v, RECT_Y + (RECT_HEIGHT / 2) + 95, 0);
                        } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                            int hue_v = atoi(notifiedDevice->getLastNotificationIndexValue());
                            hue_v = hue_v + 25;
                            pngImg.drawPNG(25, RECT_Y + (RECT_HEIGHT / 2) + 55, 1, 0, color_png);
                            fillRect(280, 181, 300, 221, RGB(255, 255, 255));
                            drawLine(hue_v, RECT_Y + (RECT_HEIGHT / 2) + 55, hue_v, RECT_Y + (RECT_HEIGHT / 2) + 95, 0);
                        }
                    }
                }
                    break; //Dimmer";
                case BinarySensor:
                {
                    if (MODE != DEVICE_MODE) {//
                        if (notifiedDevice->getLastNotificationIndex() == 1) {
                            fillRect(80, 130, 300, 200, RR_COLOR);
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("true", "common"));
                            } else {
                                swprintf(opt, 179, L" %ls", lan.get("false", "common"));
                            }
                            drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 20, 300, 1, 0, 35.0f, 65535, 1);
                        } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                            int batteryVal;
                            batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                            pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                            if (batteryVal != 0xff && batteryVal != 0) {
                                swprintf(opt, 5, L"%hd%%", batteryVal);
                                drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                            } else {
                                drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                            }
                        }
                        if (notifiedDevice->getLastNotificationIndex() == 3) {
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                TamperButton.draw();
                            } else {
                                fillRect(45, 240, 140, 275, RR_COLOR);
                            }
                        }
                        // drawText(opt, 40, 135, 400, 1, 0, 45.0f, 65535, 1);
                    }

                }
                    break; //Binary Sensor";    
                case DoorSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(80, 120, 300, 180, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("open", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("closed", "connected_sensor"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 40.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            TamperButton.draw();
                        } else {
                            fillRect(45, 240, 140, 275, RR_COLOR);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 4) {
                        convertTemperature(4, opt);
                        fillRect(215, 93, 300, 122, GREEN_COLOR);
                        drawText(opt, 215, 95, 85, 1, 0, 25.0f, 65535, 1);
                    }

                }
                    break;
                case MovementSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(10, 120, 300, 200, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("motiondetected", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("nomotion", "connected_sensor"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(200, 45, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 205, 47, 80, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 205, 47, 80, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            TamperButton.draw();
                        } else {
                            fillRect(45, 240, 140, 275, RR_COLOR);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 4) {
                        fillRect(225, 85, 300, 110, RR_COLOR);
                        convertTemperature(4, opt);
                        drawText(opt, 225, 87, 75, 1, 0, 16.0f, 65535, 1);
                    }
                }
                    break; //MovementSensor";                    
                case ShockSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(10, 120, 300, 200, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("vibrationdetected", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("novibration", "connected_sensor"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            TamperButton.draw();
                        } else {
                            fillRect(45, 240, 140, 275, RR_COLOR);
                        }
                    }
                }
                    break; //Binary Sensor";
                case FloodSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(10, 120, 300, 200, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "0") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("okay", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("flooded", "connected_sensor"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    }
                }
                    break; //FloodSensor";
                case SmokeDetector:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(10, 120, 300, 170, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "0") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("okay", "connected_sensor"));
                        } else if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "254") == 0) {
                            swprintf(opt, 179, L" %ls", L"Testing");
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("smokedetected", "connected_sensor"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    }
                }
                    break; //SmokeDetector";
                case Alarm:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(10, 120, 300, 200, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "0") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("false", "common"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("true", "common"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    }
                }
                    break; //Alarm";
                case MoistureSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        wchar_t arr[20];
                        fillRect(190, 95, 300, 125, GREEN_COLOR);
                        convertTemperature(1, arr);
                        drawText(arr, 200, 100, 100, 1, 0, 25.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        fillRect(10, 120, 300, 200, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "0") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("notflooded", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("flooded", "connected_sensor"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    }
                }
                    break;
                case TemperatureSensor:
                {
                    char ss[500];
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(225, 85, 300, 110, RR_COLOR);
                        sprintf(ss, "%ls %s", lan.get("temp", "connected_sensor"), notifiedDevice->getLastNotificationIndexValue());
                        utf8_to_wchar(ss, strlen(ss), opt, strlen(ss), UTF8_IGNORE_ERROR);
                        drawText(opt, 225, 87, 75, 1, 0, 16.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        fillRect(10, 120, 300, 200, RR_COLOR);
                        swprintf(opt, 179, L"%ls %hs", lan.get("humidity", "connected_sensor"), notifiedDevice->getLastNotificationIndexValue());
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                        }
                    }
                }

                    break;
                case LightSensor:
                {
                    switch (notifiedDevice->getIndexType(notifiedDevice->getLastNotificationIndex())) {
                        case Temperature:
                        {

                            fillRect(190, 95, 300, 125, GREEN_COLOR);
                            memset(opt, 0, sizeof (opt));
                            convertTemperature(notifiedDevice->getLastNotificationIndex(), opt);
                            drawText(opt, 200, 100, 100, 1, 0, 20.0f, 65535, 1);
                        }
                            break;
                        case Humidity:
                        {
                            swprintf(opt, 20, L"%4s%%    ", notifiedDevice->getLastNotificationIndexValue());
                            drawTextWithBG(opt, 175, 160, 60, 1, 0, 20.0f, 65535, RR_COLOR, 0);
                        }
                            break;
                        case Illuminance:
                        {
                            swprintf(opt, 20, L"%s Lux    ", notifiedDevice->getLastNotificationIndexValue());
                            drawTextWithBG(opt, 175, 135, 70, 1, 0, 20.0f, 65535, RR_COLOR, 0);
                        }
                            break;
                        case Battery:
                        {
                            int batteryVal;
                            batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                            pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                            if (batteryVal != 0xff && batteryVal != 0) {
                                swprintf(opt, 5, L"%hd%%", batteryVal);
                                drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                            } else {
                                drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                            }
                        }
                            break;
                        case Tamper:
                        {
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                enableTouch = true;
                                TamperButton.draw();
                            }
                        }
                    }
                }
                    break;
                case ZigbeeMultiSensor:
                {

                    switch (notifiedDevice->getIndexType(notifiedDevice->getLastNotificationIndex())) {
                        case Temperature:
                        {

                            fillRect(190, 95, 300, 125, GREEN_COLOR);
                            memset(opt, 0, sizeof (opt));
                            convertTemperature(notifiedDevice->getLastNotificationIndex(), opt);
                            drawText(opt, 200, 100, 100, 1, 0, 20.0f, 65535, 1);
                        }
                            break;
                        case Tamper:
                        {
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                enableTouch = true;
                                TamperButton.draw();
                            }
                        }
                            break;
                        case MotionState:
                        {
                            char tempv[10];
                            strcpy(tempv, notifiedDevice->getLastNotificationIndexValue());
                            swprintf(opt, 179, L"%ls", (tempv[0] == 'f' || tempv[0] == 'F') ? lan.get("nomotion", "connected_sensor") : lan.get("motiondetected", "connected_sensor"));
                            fillRect(70, 129, 260, 143, RR_COLOR);
                            drawText(opt, 70, 128, 190, 1, 0, 20.0f, 65535, 1);
                        }
                            break;
                        case LowBattery:
                        {

                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                fillRect(70, 148, 260, 162, RR_COLOR);
                                drawText(L"Low", 70, 148, 60, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                            }
                        }
                            break;
                        case FireState:
                        {
                            fillRect(70, 168, 260, 182, RR_COLOR);
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("alarmfire", "connected_sensor"));
                            } else {
                                swprintf(opt, 179, L" %ls", lan.get("okay", "connected_sensor"));
                            }
                            drawText(opt, 70, 168, 190, 1, 0, 20.0f, 65535, 1);
                        }
                            break;
                    }



                }
                    break;
                case ContactSwitch:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("open", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("closed", "connected_sensor"));
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 4) {
                        fillRect(215, 93, 300, 122, GREEN_COLOR);
                        convertTemperature(4, opt);
                        drawText(opt, 215, 95, 85, 1, 0, 25.0f, 65535, 1);
                    }
                    battery(contDevID);
                }
                    break;
                case VibrationOrMovementSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("vibrationdetected", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("novibration", "connected_sensor"));
                        }

                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    }
                    battery(contDevID);
                }
                    break;
                case MotionSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("motiondetected", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("nomotion", "connected_sensor"));
                        }

                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 4) {
                        fillRect(215, 93, 300, 122, GREEN_COLOR);
                        convertTemperature(4, opt);
                        drawText(opt, 215, 95, 85, 1, 0, 25.0f, 65535, 1);
                    }
                    battery(contDevID);
                }
                    break;
                case FireSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("alarmfire", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("okay", "connected_sensor"));
                        }

                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    }
                    battery(contDevID);
                }
                    break;
                case WaterSensor:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            swprintf(opt, 179, L" %ls", lan.get("flooded", "connected_sensor"));
                        } else {
                            swprintf(opt, 179, L" %ls", lan.get("okay", "connected_sensor"));
                        }

                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 4) {
                        fillRect(215, 93, 300, 122, GREEN_COLOR);
                        convertTemperature(4, opt);
                        drawText(opt, 215, 95, 85, 1, 0, 25.0f, 65535, 1);
                    }
                    battery(contDevID);
                }
                    break;
                case KeyFob:

                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (atoi(notifiedDevice->getLastNotificationIndexValue()) == 0) {
                            drawText(lan.get("disarmall", "connected_sensor"), NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                        } else if (atoi(notifiedDevice->getLastNotificationIndexValue()) == 2) {
                            drawText(lan.get("armperimeter", "connected_sensor"), NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                        } else if (atoi(notifiedDevice->getLastNotificationIndexValue()) == 3) {
                            drawText(lan.get("armall", "connected_sensor"), NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {

                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            PanicButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            EmerButton.draw();
                        } else {
                            fillRect(100, 190, 165, 220, RR_COLOR);
                        }
                    }
                    break;
                case StandardWarningDevice:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    }
                }
                    break;
                case GasSensor:
                case PersonalEmergencyDevice:
                case Keypad:
                case StandardCIE:

                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (contDev == GasSensor) {
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("gasdetected", "connected_sensor"));
                            } else {
                                swprintf(opt, 179, L" %ls", lan.get("okay", "connected_sensor"));
                            }
                        } else {
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("active", "connected_sensor"));
                            } else {
                                swprintf(opt, 179, L" %ls", lan.get("inactive", "connected_sensor"));
                            }
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    }
                    battery(contDevID);
                }
                    break;
                case RemoteControl:
                {
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y + 15, 300, NOTIFICATION_Y + 80, RR_COLOR);
                        if (contDev == GasSensor) {
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("gasdetected", "connected_sensor"));
                            } else {
                                swprintf(opt, 179, L" %ls", lan.get("okay", "connected_sensor"));
                            }
                        } else {
                            if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("active", "connected_sensor"));
                                wcscpy(btnDeActive.W.text, L"Deactivate");
                                btnDeActive.draw();
                            } else {
                                fillRect(25, 190, 105, 220, RR_COLOR);
                                wcscpy(btnDeActive.W.text, L"Activate");
                                swprintf(opt, 179, L" %ls", lan.get("inactive", "connected_sensor"));
                            }
                        }
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y + 15, 300, 1, 0, 35.0f, 65535, 1);
                    }
                    if (notifiedDevice->getLastNotificationIndex() == 3) {
                        if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                            enableTouch = true;
                            TamperButton.draw();
                        } else {
                            fillRect(15, 190, 95, 220, RR_COLOR);
                        }
                    }
                    battery(contDevID);
                }
                    break;
                case DoorLock:
                {
                        if (MODE != DEVICE_MODE) {//
                            if (notifiedDevice->getLastNotificationIndex() == 1) {
                                wchar_t abc[180] = L"", xyz[180] = L"";
                                swprintf(abc, 179, L"%ls", lan.get("doorlock", "connected_sensor"));
                                if (atoi(notifiedDevice->getLastNotificationIndexValue()) == 0) {
                                    swprintf(xyz, 179, L"%ls", lan.get("unlocked", "connected_sensor"));
                                } else if (atoi(notifiedDevice->getLastNotificationIndexValue()) == 23 || atoi(notifiedDevice->getLastNotificationIndexValue()) == 26 || atoi(notifiedDevice->getLastNotificationIndexValue()) == 17 || atoi(notifiedDevice->getLastNotificationIndexValue()) == 254) {
                                    swprintf(xyz, 179, L"%ls", lan.get("notfullylocked", "connected_sensor"));
                                } else {
                                    swprintf(xyz, 179, L"%ls", lan.get("locked", "connected_sensor"));
                                }
                                swprintf(opt, 179, L"%ls: %ls", abc, xyz);
                                fillRect(40, 97, 240, 122, RR_COLOR);
                                drawText(opt, 40, 97, 200, 1, 0, 20.0f, 65535, 1);
                            } else if (notifiedDevice->getLastNotificationIndex() == 3) {
                                int batteryVal;
                                batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                                pngImg.drawPNG(243, 60, 1, 0, battery_icon);
                                if (batteryVal != 0xff && batteryVal != 0) {
                                    swprintf(opt, 5, L"%hd%%", batteryVal);
                                    drawText(opt, 243, 62, 40, 1, 0, 12.0f, RGB(0, 0, 0), 1);
                                } else {
                                    drawText(lan.get("low", "connected_sensor"), 243, 62, 40, 1, 0, 12.0f, RGB(255, 0, 0), 0);
                                }
                            } else if (notifiedDevice->getLastNotificationIndex() > 4) {
                                if (notifiedDevice->getLastNotificationIndex() == Userno + 4) {
                                    if (!strcmp(notifiedDevice->getLastNotificationIndexValue(), "")) {
                                        sprintf(Userpin, "%ls", lan.get("unassigned", "connected_sensor"));
                                    } else {
                                        strcpy(Userpin, notifiedDevice->getLastNotificationIndexValue());
                                    }
                                    fillRect(105, 160, 225, 185, RR_COLOR);
                                    swprintf(opt, 179, L"%s", Userpin);
                                    drawText(opt, 105, 160, 120, 1, 0, 25.0f, 65535, 0);
                                }
                            }


                    }
                }
                    break; //Door Lock";
                case ZenThermostat:
                case Thermostat:
                {
                    double er;
                    wchar_t arr[10];
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        thermoCurrent = atof(notifiedDevice->getValue(1));
                        memset(arr, 0, sizeof (arr));
                        fillRect(225, 97, 300, 125, RGB(50, 191, 20));
                        convertTemperature(1, arr);
                        drawText(arr, 225, 97 + 6, 75, 1, 0, 18.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 4) {
                        er = atof(notifiedDevice->getValue(4));
                        thermoHeat = (int) er;
                        thermoHeatCurrLevel = (thermoHeat - 35)*3;
                        fillRect(THERMO_HEAT_X + 6, THERMO_HEAT_Y, THERMO_HEAT_X + THERMO_HEAT_WIDTH - 6, THERMO_HEAT_Y + THERMO_HEAT_HEIGHT, RGB(23, 191, 227));
                        drawLine(THERMO_HEAT_X + 5, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), THERMO_HEAT_X + THERMO_HEAT_WIDTH - 5, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 65535);
                        if (THERMO_HEAT_X + 10 + thermoHeatCurrLevel < 250) {
                            fillCircle(THERMO_HEAT_X + 10 + thermoHeatCurrLevel, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 5, 65535);
                        } else {
                            fillCircle(THERMO_HEAT_X + THERMO_HEAT_WIDTH - 11, THERMO_HEAT_Y + (THERMO_HEAT_HEIGHT / 2), 5, 65535);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 5) {
                        er = atof(notifiedDevice->getValue(5));
                        thermoCool = (int) er;
                        thermoCoolCurrLevel = (thermoCool - 35)*3;
                        fillRect(THERMO_COOL_X + 6, THERMO_COOL_Y, THERMO_COOL_X + THERMO_COOL_WIDTH - 6, THERMO_COOL_Y + THERMO_COOL_HEIGHT, RGB(23, 191, 227));
                        drawLine(THERMO_COOL_X + 5, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), THERMO_COOL_X + THERMO_COOL_WIDTH - 5, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 65535);
                        if (THERMO_COOL_X + 10 + thermoCoolCurrLevel < 250) {
                            fillCircle(THERMO_COOL_X + 10 + thermoCoolCurrLevel, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 5, 65535);
                        } else {
                            fillCircle(THERMO_COOL_X + THERMO_COOL_WIDTH - 11, THERMO_COOL_Y + (THERMO_COOL_HEIGHT / 2), 5, 65535);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 2) {
                        strcpy(thermoMode, notifiedDevice->getValue(2));
                        fillRect(60, 97, 110, 125, !(strstr(thermoMode, "Auto")) ? BUTTON_LAYER : RGB(23, 191, 227));
                        fillRect(115, 97, 165, 125, !(strstr(thermoMode, "Cool")) ? BUTTON_LAYER : RGB(23, 191, 227));
                        fillRect(170, 97, 220, 125, !(strstr(thermoMode, "Heat")) ? BUTTON_LAYER : RGB(23, 191, 227));
                        drawText(lan.get("auto", "connected_sensor"), 65, 103, 50, 1, 0, 16.0f, 65535, 1);
                        drawText(lan.get("cool", "connected_sensor"), 120, 103, 50, 1, 0, 16.0f, 65535, 1);
                        drawText(lan.get("heat", "connected_sensor"), 175, 103, 50, 1, 0, 16.0f, 65535, 1);
                        if (strstr(thermoMode, "Auto")) {
                            pngImg.drawPNG(60, 105, 1, BACKGROUND_LAYER, Tick);
                        } else if (strstr(thermoMode, "Cool")) {
                            pngImg.drawPNG(115, 105, 1, BACKGROUND_LAYER, Tick);
                        } else if (strstr(thermoMode, "Heat")) {
                            pngImg.drawPNG(170, 105, 1, BACKGROUND_LAYER, Tick);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 6) {
                        strcpy(thermoFan, notifiedDevice->getValue(6));
                        if (notifiedDevice->getValueCount() != 10 || (notifiedDevice->getDeviceTechnology() == ZigBeeTechnology)) {
                            fillRect(60, 190, 135, 218, !(strstr(thermoFan, "Auto Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                            fillRect(140, 190, 215, 218, !(strstr(thermoFan, "On Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                            drawText(lan.get("auto_low", "connected_sensor"), 65, 195, 75, 1, 0, 16.0f, 65535, 1);
                            drawText(lan.get("on_low", "connected_sensor"), 145, 195, 75, 1, 0, 16.0f, 65535, 1);
                            if (strstr(thermoFan, "Auto Low")) {
                                pngImg.drawPNG(60, 197, 1, BACKGROUND_LAYER, Tick);
                            } else if (strstr(thermoFan, "On Low")) {
                                pngImg.drawPNG(140, 197, 1, BACKGROUND_LAYER, Tick);
                            }
                        } else {
                            //fillRect(60, 190, 215, 218, RR_COLOR);
                            fillRect(60, 190, 100, 218, !(strstr(thermoFan, "Auto Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                            fillRect(110, 190, 150, 218, !(strstr(thermoFan, "On Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                            drawText(L"Auto", 62, 195, 40, 1, 0, 16.0f, 65535, 1);
                            drawText(L"On", 110, 195, 40, 1, 0, 16.0f, 65535, 1);
                            if (strstr(thermoFan, "Auto Low")) {
                                pngImg.drawPNG(60, 197, 1, BACKGROUND_LAYER, Tick);
                            } else if (strstr(thermoFan, "On Low")) {
                                pngImg.drawPNG(110, 197, 1, BACKGROUND_LAYER, Tick);
                            }
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 8) {

                        int batteryVal;
                        batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                        if (batteryVal != 0xff && batteryVal != 0) {
                            swprintf(opt, 5, L"%hd%%", batteryVal);
                            drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                        } else {
                            drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 10.0f, RGB(255, 0, 0), 0);
                        }
                    } else if (notifiedDevice->getLastNotificationIndex() == 10) {//newal3
                        //if ((strcmp(d.getValue(10), "#ERR"))) {
                        fillRect(60, 190, 215, 218, RR_COLOR);
                        fillRect(60, 190, 100, 218, !(strstr(thermoFan, "Auto Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                        fillRect(110, 190, 150, 218, !(strstr(thermoFan, "On Low")) ? BUTTON_LAYER : RGB(23, 191, 227));
                        drawText(L"Auto", 62, 195, 40, 1, 0, 16.0f, 65535, 1);
                        drawText(L"On", 110, 195, 40, 1, 0, 16.0f, 65535, 1);
                        if (strstr(thermoFan, "Auto Low")) {
                            pngImg.drawPNG(60, 197, 1, BACKGROUND_LAYER, Tick);
                        } else if (strstr(thermoFan, "On Low")) {
                            pngImg.drawPNG(110, 197, 1, BACKGROUND_LAYER, Tick);
                        }
                        er = atof(notifiedDevice->getLastNotificationIndexValue());
                        pngImg.drawPNG(160, 195, 1, BACKGROUND_LAYER, humidityImage);
                        sprintf(output, "%.0lf", er);
                        aswprintf(arr, 20, L": %hs%%", output);
                        drawText(arr, 180, 195, 40, 1, 0, 16.0f, 65535, 0);
                        //}
                    }
                    EditButton.draw();
                }
                    break;
                case Gateway:

                    break; //Gateway";
                case SceneController:

                    break; //Scene Control";
                case SmartACSwitch:
                {
                    char tmp_str[30];
                    if (notifiedDevice->getLastNotificationIndex() == 1) {
                        strcpy(tmp_str, notifiedDevice->getLastNotificationIndexValue());
                        fillRect(NOTIFICATION_X, NOTIFICATION_Y - 5, 309, NOTIFICATION_Y + 25, RR_COLOR);
                        swprintf(opt, 179, L"%ls", (tmp_str[0] == 'f' || tmp_str[0] == 'F') ? lan.get("off_1", "common") : lan.get("on_1", "common"));
                        drawText(opt, NOTIFICATION_X, NOTIFICATION_Y - 8, 300, 1, 0, 30.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 11) {

                        fillRect(NOTIFICATION_X + 77, 165, 300 - 82, 185, RR_COLOR);
                        ActivePower = atof(notifiedDevice->getLastNotificationIndexValue());
                        swprintf(opt, 179, L"%ls: %0.2fW", lan.get("power", "connected_sensor"), ActivePower);
                        drawText(opt, 10 + 75, 165, 300 - 160, 1, 0, 18.0f, 65535, 1);
                    } else if (notifiedDevice->getLastNotificationIndex() == 13) {
                        fillRect(NOTIFICATION_X + 77, 185, 300 - 82, 205, RR_COLOR);
                        RMSCurrent = atof(notifiedDevice->getLastNotificationIndexValue());
                        swprintf(opt, 179, L"%ls: %0.2fA", lan.get("current", "connected_sensor"), RMSCurrent);
                        drawText(opt, 10 + 75, 185, 300 - 160, 1, 0, 18.0f, 65535, 1);
                        //                    EditButton.draw();
                    } else if (notifiedDevice->getLastNotificationIndex() == 12) {
                        fillRect(NOTIFICATION_X + 77, 205, 300 - 82, 225, RR_COLOR);
                        RMSVoltage = atof(notifiedDevice->getLastNotificationIndexValue());
                        swprintf(opt, 179, L"%ls: %0.2f V", lan.get("voltage", "connected_sensor"), RMSVoltage);
                        drawText(opt, 10 + 75, 205, 300 - 160, 1, 0, 18.0f, 65535, 1);
                    }
                }
                    break; //Switch";
                case SecurifiSmartSwitch:
                {
                    char tmp_str[30];
                    if (MODE == CONTROL_MODE) {
                        if (notifiedDevice->getLastNotificationIndex() == 1) {
                            strcpy(tmp_str, notifiedDevice->getLastNotificationIndexValue());
                            fillRect(NOTIFICATION_X, 97, 300, 125, RR_COLOR);
                            swprintf(opt, 179, L"%ls", (tmp_str[0] == 'f' || tmp_str[0] == 'F') ? lan.get("off_1", "common") : lan.get("on_1", "common"));
                            drawText(opt, NOTIFICATION_X, NOTIFICATION_Y - 8, 300, 1, 0, 30.0f, 65535, 1);
                        } else if (notifiedDevice->getLastNotificationIndex() == 11) {

                            fillRect(NOTIFICATION_X + 77, 165, 300 - 82, 185, RR_COLOR);
                            ActivePower = atof(notifiedDevice->getLastNotificationIndexValue());
                            //                            ActivePower = (ActivePower * powmulti) / powdiv;
                            swprintf(opt, 179, L"%ls: %0.2fW", lan.get("power", "connected_sensor"), ActivePower);
                            drawText(opt, 10 + 75, 165, 300 - 160, 1, 0, 18.0f, 65535, 1);
                        } else if (notifiedDevice->getLastNotificationIndex() == 13) {
                            fillRect(NOTIFICATION_X + 77, 185, 300 - 82, 205, RR_COLOR);
                            RMSCurrent = atof(notifiedDevice->getLastNotificationIndexValue());
                            //                            RMSCurrent = (RMSCurrent * curmulti) / curdiv;
                            swprintf(opt, 179, L"%ls: %0.2fA", lan.get("current", "connected_sensor"), RMSCurrent);
                            drawText(opt, 10 + 75, 185, 300 - 160, 1, 0, 18.0f, 65535, 1);

                        } else if (notifiedDevice->getLastNotificationIndex() == 12) {
                            fillRect(NOTIFICATION_X + 77, 205, 300 - 82, 225, RR_COLOR);
                            RMSVoltage = atof(notifiedDevice->getLastNotificationIndexValue());
                            swprintf(opt, 179, L"%ls: %0.2f V", lan.get("voltage", "connected_sensor"), RMSVoltage);
                            drawText(opt, 10 + 75, 205, 300 - 160, 1, 0, 18.0f, 65535, 1);
                        } else if (notifiedDevice->getLastNotificationIndex() == 15) {
                            for (list<peanut_plug>::iterator iterator = peanut_plug_info.begin(); iterator != peanut_plug_info.end(); ++iterator) {
                                if ((iterator->S_Dev_ID == notifiedDevice->getID())) {
                                    if (atoi(notifiedDevice->getLastNotificationIndexValue()) > 200) {
                                        iterator->S_state = false;
                                        iterator->percentage = 0;
                                        u_val = 0;
                                        ota_upgrade_flag = false;
                                    } else if ((atoi(notifiedDevice->getLastNotificationIndexValue()) < 100)) {
                                        iterator->S_state = true;
                                        ota_upgrade_flag = true;
                                        s_devid = notifiedDevice->getID();
                                        iterator->percentage = (atoi(notifiedDevice->getLastNotificationIndexValue()));
                                    } else {
                                        iterator->S_state = false;
                                        iterator->percentage = 0;
                                        ota_upgrade_flag = false;
                                        u_val = 0;
                                    }
                                }
                            }
                        }
                    } else if (MODE == RETAIN_MODE || MODE == UPGRADE_MODE) {
                        //                        LOG(Logger::INFO,"callback for FW updation");
                        if (notifiedDevice->getLastNotificationIndex() == 14) {
                            if ((strtol(notifiedDevice->getValue(14), NULL, 16)) == 0) {
                                RetainButton.setSelected(1);
                            } else {
                                RetainButton.setSelected(0);
                            }
                            RetainButton.draw();
                        } else if (notifiedDevice->getLastNotificationIndex() == 15) {
                            for (list<peanut_plug>::iterator iterator = peanut_plug_info.begin(); iterator != peanut_plug_info.end(); ++iterator) {
                                if ((iterator->S_Dev_ID == notifiedDevice->getID())) {
                                    sprintf(t_temp, "upgrading %d percentage and mode %d\n", atoi(notifiedDevice->getLastNotificationIndexValue()), MODE);
                                    LOG(Logger::INFO, t_temp);
                                    if (atoi(notifiedDevice->getLastNotificationIndexValue()) > 200) {
                                        fillRect(10, 93, 310, 127, RR_COLOR);
                                        swprintf(opt, 179, L"%ls", L"Upgrade Success");
                                        iterator->S_state = false;
                                        iterator->percentage = 0;
                                        ota_upgrade_flag = false;
                                        drawText(opt, 10, 93, 300, 1, 0, 30.0f, 65535, 1);
                                        u_val = 0;
                                        per = 0;
                                        break;
                                    } else if ((atoi(notifiedDevice->getLastNotificationIndexValue()) < 100)) {
                                        iterator->percentage = (atoi(notifiedDevice->getLastNotificationIndexValue()));
                                        if ((atoi(notifiedDevice->getLastNotificationIndexValue())) > per) {
                                            s_devid = notifiedDevice->getID();
                                            per = (atoi(notifiedDevice->getLastNotificationIndexValue()));
                                            fillRect(10, 93, 310, 127, RR_COLOR);
                                            swprintf(opt, 179, L"%ls %s%%", L"Upgrading", notifiedDevice->getLastNotificationIndexValue());
                                            drawText(opt, 10, 93, 300, 1, 0, 30.0f, 65535, 1);
                                            u_val = 0;
                                            break;
                                        } else if ((atoi(notifiedDevice->getLastNotificationIndexValue())) == 0) {
                                            s_devid = notifiedDevice->getID();
                                            ota_upgrade_flag = true;
                                            if (u_val == 0) {
                                                drawArea();
                                                fillRect(10, 93, 310, 127, RR_COLOR);
                                                swprintf(opt, 179, L"%ls 0%%", L"Upgrading");
                                                drawText(opt, 10, 93, 300, 1, 0, 30.0f, 65535, 1);
                                                upgradeButton.W.isEnabled = -1;
                                                upgradeButton.draw();
                                            }
                                            u_val++;
                                            break;
                                        }
                                    } else {
                                        if (!ota_upgrade_flag)
                                            drawArea();
                                        fillRect(10, 93, 310, 127, RR_COLOR);
                                        swprintf(opt, 179, L"%ls", L"Upgrade Failed");
                                        drawText(opt, 10, 93, 300, 1, 0, 30.0f, 65535, 1);
                                        iterator->S_state = false;
                                        iterator->percentage = 0;
                                        ota_upgrade_flag = false;
                                        u_val = 0;
                                        per = 0;
                                        break;
                                    }

                                }

                            }

                        }
                        if (notifiedDevice->getLastNotificationIndex() == 16) {
                            old_version = atoi(notifiedDevice->getLastNotificationIndexValue());
                            sprintf(t_temp, "switch version %d", old_version);
                            LOG(Logger::INFO, t_temp);

                        }
                    }
                }
                    break; //Switch";
                case GarageDoorOpener://newal2
                {
                    int DoorLevel;
                    if (MODE != DEVICE_MODE) {//
                        if (notifiedDevice->getLastNotificationIndex() == 1) {
                            fillRect(110, 100, 260, 128, RR_COLOR);
                            DoorLevel = atoi(notifiedDevice->getLastNotificationIndexValue());
                            if (DoorLevel == 255) {
                                swprintf(opt, 179, L" %ls", lan.get("open", "connected_sensor"));
                            } else if (DoorLevel == 254) {
                                swprintf(opt, 179, L" %ls", lan.get("opening", "connected_sensor")); //newal3
                            } else if (DoorLevel == 252) {
                                swprintf(opt, 179, L" %ls", lan.get("closing", "connected_sensor"));
                            } else if (DoorLevel == 253) {
                                swprintf(opt, 179, L" %ls", lan.get("stopped", "connected_sensor"));
                            } else if (DoorLevel == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("closed", "connected_sensor"));
                            }
                            drawText(opt, 90, 100, 150, 1, 0, 30.0f, 65535, 1);
                            //drawText(opt, 40, 115, 390, 1, 0, 45.0f, 65535, 1);
                        }
                    }
                }
                    break;
                case MultiSoundSiren://newal2
                {
                    if (MODE != DEVICE_MODE) {
                        if (notifiedDevice->getLastNotificationIndex() == 1) {
                            int SoundType = atoi(notifiedDevice->getLastNotificationIndexValue());
                            //50, 120, 100, 50, 0, RGB(0, 205, 20), 1, 20.0f, 65535, L"");//newal2
                            fillRect(50, 120, 150, 170, RGB(0, 205, 20));
                            if (SoundType == 0) {
                                swprintf(opt, 179, L" %ls", lan.get("alarm", "connected_sensor")); //50, 120, 100, 50
                                drawText(opt, 50, 130, 100, 1, 0, 30.0f, 65535, 1);
                            } else if (SoundType == 1) {
                                swprintf(opt, 179, L" %ls", lan.get("emergency", "connected_sensor"));
                                //                                swprintf(opt, 179, L" %ls", L"Emergency");
                                drawText(opt, 50, 135, 100, 1, 0, 20.0f, 65535, 1);
                            } else if (SoundType == 2) {
                                swprintf(opt, 179, L" %ls", L"Fire");
                                //                                swprintf(opt, 179, L" %ls", L"Fire");
                                drawText(opt, 50, 130, 100, 1, 0, 30.0f, 65535, 1);
                            } else if (SoundType == 3) {
                                swprintf(opt, 179, L" %ls", L"Ambulance");
                                //                                swprintf(opt, 179, L" %ls", L"Ambulance");
                                drawText(opt, 50, 135, 100, 1, 0, 20.0f, 65535, 1);
                            } else if (SoundType == 4) {
                                swprintf(opt, 179, L" %ls", L"Police");
                                //                                swprintf(opt, 179, L" %ls", L"Police");
                                drawText(opt, 50, 130, 100, 1, 0, 30.0f, 65535, 1);
                            } else if (SoundType == 5) {
                                swprintf(opt, 179, L" %ls", L"Door chime");
                                //                                swprintf(opt, 179, L" %ls", L"Door chime");
                                drawText(opt, 50, 135, 100, 1, 0, 20.0f, 65535, 1);
                            } else if (SoundType >= 6) {
                                swprintf(opt, 179, L" %ls", L"Beep");
                                //                                swprintf(opt, 179, L" %ls", L"Beep");
                                drawText(opt, 50, 130, 100, 1, 0, 30.0f, 65535, 1);
                            }
                        }
                    }
                }
                    break;
                case MultiSensor://NEWAL2
                {
                    switch (notifiedDevice->getLastNotificationIndex()) {
                        case 1:
                        {
                            if (MODE != DEVICE_MODE) {
                                fillRect(40, 130, 240, 150, RR_COLOR);
                                if (strcmp(notifiedDevice->getLastNotificationIndexValue(), "true") == 0) {
                                    swprintf(opt, 179, L" %ls", lan.get("motiondetected", "connected_sensor"));
                                } else {
                                    swprintf(opt, 179, L" %ls", lan.get("nomotion", "connected_sensor"));
                                }
                                drawText(opt, 40, 130, 200, 1, 0, 25.0f, 65535, 1);
                            }
                        }
                            break;
                        case 2:
                        {

                            int batteryVal;
                            batteryVal = atoi(notifiedDevice->getLastNotificationIndexValue());
                            pngImg.drawPNG(240, 60, 1, 0, battery_icon);
                            if (batteryVal != 0xff && batteryVal != 0) {
                                swprintf(opt, 5, L"%hd%%", batteryVal);
                                drawText(opt, 245, 62, 60, 1, 0, 12.0f, RGB(0, 0, 0), 0);
                            } else {
                                drawText(lan.get("low", "connected_sensor"), 245, 62, 60, 1, 0, 10.0f, RGB(255, 0, 0), 0);
                            }

                        }
                            break;
                        case 3:
                        {
                            if (MODE != DEVICE_MODE) {
                                fillRect(40, 155, 240, 175, RR_COLOR);
                                memset(opt, 0, sizeof (opt));
                                if (strcmp(notifiedDevice->getLastNotificationIndexName(), "ILLUMINANCE") == 0) {
                                    aswprintf(opt, 179, L"%ls : %s lux", lan.get("luminance", "connected_sensor"), notifiedDevice->getLastNotificationIndexValue());
                                } else
                                    aswprintf(opt, 179, L"%ls : %s %%", lan.get("luminance", "connected_sensor"), notifiedDevice->getLastNotificationIndexValue());
                                drawText(opt, 40, 155, 200, 1, 0, 25.0f, 65535, 1);
                            }
                        }
                            break;
                        case 4:
                        {
                            if (MODE != DEVICE_MODE) {
                                wchar_t arr[20];
                                //fillRect(200, 90, 300, 125, GREEN_COLOR);
                                fillRect(190, 95, 300, 125, GREEN_COLOR);
                                convertTemperature(4, arr);
                                //drawText(arr, 200, 93, 100, 1, 0, 30.0f, 65535, 1);
                                drawText(arr, 200, 100, 100, 1, 0, 25.0f, 65535, 1);
                            }
                        }
                            break;
                        case 5:
                        {
                            char ss[180];
                            if (MODE != DEVICE_MODE) {
                                fillRect(30, 180, 230, 220, RR_COLOR);
                                memset(opt, 0, sizeof (opt));
                                sprintf(ss, "%ls : %s", lan.get("humidity", "connected_sensor"), notifiedDevice->getLastNotificationIndexValue());

